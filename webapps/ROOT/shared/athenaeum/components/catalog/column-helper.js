"use strict";
exports.columnHelper = {
    setColumnWidthsBasedOnData: function (columnDefs, dataObjects) {
        var MIN_COLUMN_WIDTH = 4;
        var EXTRA_WIDTH_FOR_SELECT_COLUMNS = 2;
        var firstRow = dataObjects[0];
        for (var _i = 0, columnDefs_1 = columnDefs; _i < columnDefs_1.length; _i++) {
            var columnDef = columnDefs_1[_i];
            var titleLength = columnDef.headerName ? columnDef.headerName.length : 1;
            var contentLength = 0;
            if (firstRow) {
                var contentAsString = String(firstRow[columnDef.field]);
                contentLength = contentAsString.length;
            }
            if (columnDef.field === "nameAndId" ||
                columnDef.field === "name") {
                titleLength = 24;
            }
            var maxLength = Math.max(contentLength, titleLength);
            maxLength = Math.max(maxLength, MIN_COLUMN_WIDTH);
            if (columnDef.filter) {
                maxLength += EXTRA_WIDTH_FOR_SELECT_COLUMNS;
            }
            columnDef.width = (maxLength + 1) * 10;
        }
    },
    makeColumnDefsForProperties: function (properties, defaultColumns, additionalColumns) {
        var allProps = properties;
        var visibleCols = defaultColumns;
        var hiddenCols = additionalColumns;
        var columnDefs = [];
        _addMoreColumnDefs(columnDefs, visibleCols, allProps, { hide: false });
        _addMoreColumnDefs(columnDefs, hiddenCols, allProps, { hide: true });
        return columnDefs;
    },
    addCheckboxColumn: function (columnDefs) {
        var CHECKBOX_COLUMN_NAME = "generated-checkbox-column-field";
        var columnDef = {
            field: CHECKBOX_COLUMN_NAME,
            headerName: "",
            checkboxSelection: true,
            suppressMenu: true,
            suppressSorting: true,
            width: 28
        };
        columnDefs.unshift(columnDef);
    }
};
function _linkCellRenderer(text, id) {
    return "<a class=\"link-cell-link\" href=\"#\" data-itemid=\"" + id + "\">\n    " + text + "\n</a>";
}
function _dateCellRenderer(params) {
    if (!params.value) {
        return "";
    }
    var date = new Date(params.value);
    return date.toLocaleString();
}
function _numberCellRenderer(params) {
    var number = params.value;
    return (number || number === 0) ? (number.toLocaleString()) : "";
}
function _columnDefForSchemaProperty(propertyName, schemaProperty) {
    var type = schemaProperty.type;
    var columnDef = {
        field: propertyName,
        headerName: schemaProperty.title,
        description: schemaProperty.description,
        type: schemaProperty.type,
        suppressMenu: true
    };
    if (type === "integer") {
        columnDef.cellRenderer = _numberCellRenderer;
    }
    if (type === "string" && schemaProperty.format === "date-time") {
        columnDef.cellRenderer = _dateCellRenderer;
    }
    if (type === "object" && schemaProperty.cellRenderer) {
        columnDef.cellRenderer = schemaProperty.cellRenderer;
    }
    var idField = schemaProperty.idField;
    if (idField) {
        var renderer_1 = columnDef.cellRenderer;
        if (renderer_1) {
            columnDef.cellRenderer = function (params) {
                if (!params.data) {
                    return "";
                }
                var text = renderer_1.call(this, params);
                return _linkCellRenderer.call(this, text, params.data[idField]);
            };
        }
        else {
            columnDef.cellRenderer = function (params) {
                if (!params.data) {
                    return "";
                }
                return _linkCellRenderer.call(this, params.data[propertyName], params.data[idField]);
            };
        }
    }
    return columnDef;
}
function _assign(to, from) {
    "use strict";
    for (var key in from) {
        if (from.hasOwnProperty(key)) {
            to[key] = from[key];
        }
    }
    return to;
}
function _addMoreColumnDefs(columnDefs, propNames, schemaProps, overrides) {
    "use strict";
    if (propNames) {
        for (var _i = 0, propNames_1 = propNames; _i < propNames_1.length; _i++) {
            var propName = propNames_1[_i];
            var schemaProperty = schemaProps[propName];
            var columnDef = _columnDefForSchemaProperty(propName, schemaProperty);
            var fullColDef = _assign(columnDef, overrides);
            columnDefs.push(fullColDef);
        }
    }
}

//# sourceMappingURL=data:application/json;base64,