"use strict";
var Rx_1 = require("rxjs/Rx");
var ModalManager = (function () {
    function ModalManager() {
        this._modalsShowing = [];
    }
    ModalManager.prototype.registerUnderlay = function (underlay) {
        if (this._underlay) {
            throw new Error("Only one pb-modal-underlay may be registered in an application");
        }
        this._underlay = underlay;
    };
    ModalManager.prototype.showingModal = function (modal) {
        return this._modalsShowing
            .findIndex(function (record) { return record.modal === modal; }) > -1;
    };
    ModalManager.prototype.show = function (modal) {
        var _this = this;
        if (!this._underlay) {
            throw new Error("No pb-modal-underlay has been registered! Ensure one " +
                "exists in the application and that it has been placed in " +
                "the template before any dialogs.");
        }
        if (this._hiddenHandle) {
            this._hiddenHandle.unsubscribe();
        }
        this._modalsShowing.forEach(function (record) {
            if (record.shownHandle) {
                record.shownHandle.unsubscribe();
            }
        });
        var record = { modal: modal };
        var length = (function () {
            var length = _this._modalsShowing.length;
            var last = _this._modalsShowing[length - 1];
            if (last && last.modal === modal) {
                return length;
            }
            return _this._modalsShowing.push(record);
        })();
        var zIndex = length * 1000;
        var previous = this._modalsShowing[length - 2];
        var handle = new Rx_1.Subscription(function () {
            if (handle === record.shownHandle) {
                record.shownHandle = null;
            }
            handle = null;
        });
        handle.add(this._underlay.shownEvent.subscribe(function () {
            handle.unsubscribe();
            if (previous) {
                previous.modal.doHide();
            }
            modal.doShow(zIndex);
        }));
        record.shownHandle = handle;
        this._underlay.show();
    };
    ModalManager.prototype.hide = function (modal) {
        var _this = this;
        if (!this._underlay) {
            throw new Error("No pb-modal-underlay has been registered! Ensure one " +
                "exists in the application and that it has been placed in " +
                "the template before any dialogs.");
        }
        if (this._hiddenHandle) {
            this._hiddenHandle.unsubscribe();
        }
        this._modalsShowing.forEach(function (record) {
            if (record.shownHandle) {
                record.shownHandle.unsubscribe();
            }
        });
        var index = this._modalsShowing
            .findIndex(function (record) { return record.modal === modal; });
        if (index > -1) {
            var record = this._modalsShowing.splice(index, 1)[0];
            if (!record.modal.hidden) {
                var handle_1 = new Rx_1.Subscription(function () {
                    if (handle_1 === _this._hiddenHandle) {
                        _this._hiddenHandle = null;
                    }
                    handle_1 = null;
                });
                handle_1.add(record.modal.hiddenEvent.subscribe(function () {
                    handle_1.unsubscribe();
                    var last = _this._modalsShowing[_this._modalsShowing.length - 1];
                    if (!last) {
                        _this._underlay.hide();
                    }
                    else if (last.modal.hidden) {
                        last.modal.show();
                    }
                }));
                this._hiddenHandle = handle_1;
                record.modal.doHide();
            }
        }
        else {
            var last = this._modalsShowing[this._modalsShowing.length - 1];
            if (!last) {
                this._underlay.hide();
            }
            else if (last.modal.hidden) {
                last.modal.show();
            }
        }
    };
    return ModalManager;
}());
exports.ModalManager = ModalManager;

//# sourceMappingURL=data:application/json;base64,