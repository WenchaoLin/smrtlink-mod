"use strict";
function getMatchingElement(element, selector, rootNode) {
    if (rootNode === void 0) { rootNode = document.documentElement; }
    while (!element.matches(selector)) {
        if (element === rootNode ||
            !element.parentNode ||
            !element.parentNode.matches) {
            return null;
        }
        element = element.parentNode;
    }
    return element;
}
exports.getMatchingElement = getMatchingElement;
function delegatedHandler(selector, listener) {
    return function (event) {
        var rootNode = event.currentTarget;
        var existingId = rootNode.getAttribute("id");
        var eventTarget = event.target;
        var id = existingId || "__root__";
        if (!existingId) {
            rootNode.setAttribute("id", id);
        }
        else {
            id = id.replace(/"/g, "\\\"");
        }
        if (eventTarget.nodeType !== 1) {
            eventTarget = eventTarget.parentNode;
        }
        var matchedEventTarget;
        try {
            matchedEventTarget = getMatchingElement(eventTarget, "[id=\"" + id + "\"] " + selector, rootNode);
        }
        catch (error) {
        }
        finally {
            if (!existingId) {
                rootNode.removeAttribute("id");
            }
        }
        if (matchedEventTarget) {
            var args = Array.prototype.slice.call(arguments, 0);
            listener.apply(this, [matchedEventTarget].concat(args));
        }
    };
}
exports.delegatedHandler = delegatedHandler;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbW1vbi9kb20udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLDRCQUFtQyxPQUFvQixFQUNwQixRQUFnQixFQUNoQixRQUFnRDtJQUFoRCx3QkFBZ0QsR0FBaEQsV0FBd0IsUUFBUSxDQUFDLGVBQWU7SUFDeEUsT0FBTyxDQUFRLE9BQVEsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQztRQUN4QyxFQUFFLENBQUMsQ0FBQyxPQUFPLEtBQUssUUFBUTtZQUNwQixDQUFDLE9BQU8sQ0FBQyxVQUFVO1lBQ25CLENBQVEsT0FBTyxDQUFDLFVBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1lBQ3RDLE1BQU0sQ0FBQyxJQUFJLENBQUM7UUFDaEIsQ0FBQztRQUVELE9BQU8sR0FBaUIsT0FBTyxDQUFDLFVBQVUsQ0FBQztJQUMvQyxDQUFDO0lBRUQsTUFBTSxDQUFDLE9BQU8sQ0FBQztBQUNuQixDQUFDO0FBZFEsMEJBQWtCLHFCQWMxQixDQUFBO0FBRVIsMEJBQWlDLFFBQWdCLEVBQ2hCLFFBRWtDO0lBQ3ZELE1BQU0sQ0FBQyxVQUFVLEtBQVk7UUFDbEIsSUFBTSxRQUFRLEdBQXNCLEtBQUssQ0FBQyxhQUFhLENBQUM7UUFDeEQsSUFBTSxVQUFVLEdBQUcsUUFBUSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUUvQyxJQUFJLFdBQVcsR0FBc0IsS0FBSyxDQUFDLE1BQU0sQ0FBQztRQUNsRCxJQUFJLEVBQUUsR0FBRyxVQUFVLElBQUksVUFBVSxDQUFDO1FBS2xDLEVBQUUsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztZQUNkLFFBQVEsQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ3BDLENBQUM7UUFBQyxJQUFJLENBQUMsQ0FBQztZQUNKLEVBQUUsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztRQUNsQyxDQUFDO1FBRUQsRUFBRSxDQUFDLENBQVMsV0FBWSxDQUFDLFFBQVEsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBR3RDLFdBQVcsR0FBaUIsV0FBWSxDQUFDLFVBQVUsQ0FBQztRQUN4RCxDQUFDO1FBRUQsSUFBSSxrQkFBK0IsQ0FBQztRQUVwQyxJQUFJLENBQUM7WUFDRCxrQkFBa0IsR0FBRyxrQkFBa0IsQ0FBQyxXQUFXLEVBQ1gsV0FBUSxFQUFFLFlBQU0sUUFBVSxFQUMxQixRQUFRLENBQUMsQ0FBQztRQUN0RCxDQUFFO1FBQUEsS0FBSyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUVqQixDQUFDO2dCQUFTLENBQUM7WUFDUCxFQUFFLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7Z0JBQ2QsUUFBUSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNuQyxDQUFDO1FBQ0wsQ0FBQztRQUVELEVBQUUsQ0FBQyxDQUFDLGtCQUFrQixDQUFDLENBQUMsQ0FBQztZQUNyQixJQUFNLElBQUksR0FBRyxLQUFLLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ3RELFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUMsa0JBQWtCLFNBQUssSUFBSSxDQUFDLENBQUMsQ0FBQztRQUN4RCxDQUFDO0lBQ0wsQ0FBQyxDQUFDO0FBQ1QsQ0FBQztBQTdDRyx3QkFBZ0IsbUJBNkNuQixDQUFBIiwiZmlsZSI6ImNvbW1vbi9kb20uanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gZ2V0TWF0Y2hpbmdFbGVtZW50KGVsZW1lbnQ6IEhUTUxFbGVtZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3Rvcjogc3RyaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb290Tm9kZTogSFRNTEVsZW1lbnQgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpIHtcbiAgICAgICAgICAgd2hpbGUgKCEoPGFueT4gZWxlbWVudCkubWF0Y2hlcyhzZWxlY3RvcikpIHtcbiAgICAgICAgICAgICAgIGlmIChlbGVtZW50ID09PSByb290Tm9kZSB8fFxuICAgICAgICAgICAgICAgICAgICFlbGVtZW50LnBhcmVudE5vZGUgfHxcbiAgICAgICAgICAgICAgICAgICAhKDxhbnk+IGVsZW1lbnQucGFyZW50Tm9kZSkubWF0Y2hlcykge1xuICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICBlbGVtZW50ID0gPEhUTUxFbGVtZW50PiBlbGVtZW50LnBhcmVudE5vZGU7XG4gICAgICAgICAgIH1cblxuICAgICAgICAgICByZXR1cm4gZWxlbWVudDtcbiAgICAgICB9XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWxlZ2F0ZWRIYW5kbGVyKHNlbGVjdG9yOiBzdHJpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaXN0ZW5lcjogKG1hdGNoZWRUYXJnZXQ6IEhUTUxFbGVtZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudDogTW91c2VFdmVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4uYXJnczogYW55W10pID0+IHZvaWQpIHtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoZXZlbnQ6IEV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJvb3ROb2RlOiBIVE1MRWxlbWVudCA9IDxhbnk+IGV2ZW50LmN1cnJlbnRUYXJnZXQ7XG4gICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGV4aXN0aW5nSWQgPSByb290Tm9kZS5nZXRBdHRyaWJ1dGUoXCJpZFwiKTtcblxuICAgICAgICAgICAgICAgICAgICAgICBsZXQgZXZlbnRUYXJnZXQ6IEhUTUxFbGVtZW50ID0gPGFueT4gZXZlbnQudGFyZ2V0O1xuICAgICAgICAgICAgICAgICAgICAgICBsZXQgaWQgPSBleGlzdGluZ0lkIHx8IFwiX19yb290X19cIjtcblxuICAgICAgICAgICAgICAgICAgICAgICAvLyBOT1RFKGJmb3JiZXMpOiBBZGRpbmcgX19yb290X18gdG8gdGhlIHJvb3Qgbm9kZSBwcmV2ZW50c1xuICAgICAgICAgICAgICAgICAgICAgICAvLyBIVE1MRWxlbWVudCNtYXRjaGVzIGZyb20gbWF0Y2hpbmcgbm9kZXMgb3V0c2lkZSBvZiB0aGUgRE9NIHRyZWVcbiAgICAgICAgICAgICAgICAgICAgICAgLy8gb2YgdGhlIG5vZGUgd2hlcmUgdGhlIGV2ZW50IGhhbmRsZXIgaXMgYXR0YWNoZWRcbiAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFleGlzdGluZ0lkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICByb290Tm9kZS5zZXRBdHRyaWJ1dGUoXCJpZFwiLCBpZCk7XG4gICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICBpZCA9IGlkLnJlcGxhY2UoL1wiL2csIFwiXFxcXFxcXCJcIik7XG4gICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICBpZiAoKDxOb2RlPiBldmVudFRhcmdldCkubm9kZVR5cGUgIT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRleHQgbm9kZXMgZG9uJ3QgaGF2ZSAubWF0Y2hlczsgb3RoZXIgbm9kZSB0eXBlc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZ2VuZXJhbGx5IGFyZW4ndCBhcHBsaWNhYmxlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudFRhcmdldCA9IDxhbnk+ICg8Tm9kZT4gZXZlbnRUYXJnZXQpLnBhcmVudE5vZGU7XG4gICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICBsZXQgbWF0Y2hlZEV2ZW50VGFyZ2V0OiBIVE1MRWxlbWVudDtcblxuICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hlZEV2ZW50VGFyZ2V0ID0gZ2V0TWF0Y2hpbmdFbGVtZW50KGV2ZW50VGFyZ2V0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGBbaWQ9XCIke2lkfVwiXSAke3NlbGVjdG9yfWAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm9vdE5vZGUpO1xuICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogU2lsZW5jZSBlcnJvcnMgKi9cbiAgICAgICAgICAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghZXhpc3RpbmdJZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3ROb2RlLnJlbW92ZUF0dHJpYnV0ZShcImlkXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1hdGNoZWRFdmVudFRhcmdldCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICBsaXN0ZW5lci5hcHBseSh0aGlzLCBbbWF0Y2hlZEV2ZW50VGFyZ2V0LCAuLi5hcmdzXSk7XG4gICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9