"use strict";
if (!document) {
    document = {};
}
function toInt(v) {
    var i = parseInt(v, 10);
    if (i.toString() === "NaN") {
        i = 0;
    }
    return i;
}
exports.toInt = toInt;
var Sniffer = (function () {
    function Sniffer() {
        var eventSupport = {};
        var boxee = /Boxee/i.test((window.navigator || {}).userAgent);
        var bodyStyle = document.body && document.body.style;
        var vendorRegex = /^(Moz|webkit|ms)(?=[A-Z])/;
        var match;
        this.android = toInt((/android (\d+)/.exec((window.navigator || {}).userAgent.toLowerCase()) || [])[1]);
        this.animations = false;
        this.csp = document.SecurityPolicy ? document.SecurityPolicy.isActive() : false;
        this.history = !!(window.history && window.history.pushState && !(this.android < 4) && !boxee);
        this.transitions = false;
        if (bodyStyle) {
            for (var prop in bodyStyle) {
                if (match = vendorRegex.exec(prop)) {
                    this.vendorPrefix = match[0];
                    this.vendorPrefix = this.vendorPrefix.substr(0, 1)
                        .toUpperCase() + this.vendorPrefix.substr(1);
                    break;
                }
            }
            if (!this.vendorPrefix) {
                this.vendorPrefix = ("WebkitOpacity" in bodyStyle) && "webkit";
            }
            this.transitions = !!(("transition" in bodyStyle) || (this.vendorPrefix + "Transition" in bodyStyle));
            this.animations = !!(("animation" in bodyStyle) || (this.vendorPrefix + "Animation" in bodyStyle));
            if (this.android && (!this.transitions || !this.animations)) {
                this.transitions = typeof (bodyStyle.webkitTransition) === "string";
                this.animations = typeof (bodyStyle.webkitAnimation) === "string";
            }
        }
    }
    return Sniffer;
}());
exports.Sniffer = Sniffer;

//# sourceMappingURL=data:application/json;base64,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LENBQUMsVUFBVSxHQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxJQUFJLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksR0FBRyxXQUFXLElBQUksU0FBUyxDQUFDLENBQUMsQ0FBQztZQUVwRyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxJQUFLLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDM0QsSUFBSSxDQUFDLFdBQVcsR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLGdCQUFnQixDQUFDLEtBQUssUUFBUSxDQUFDO2dCQUNwRSxJQUFJLENBQUMsVUFBVSxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsZUFBZSxDQUFDLEtBQUssUUFBUSxDQUFDO1lBQ3RFLENBQUM7UUFDTCxDQUFDO0lBQ0wsQ0FBQztJQUNMLGNBQUM7QUFBRCxDQTVDQSxBQTRDQyxJQUFBO0FBNUNZLGVBQU8sVUE0Q25CLENBQUEiLCJmaWxlIjoiY29tbW9uL3NuaWZmZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBpZiB0ZXN0aW5nXG5pZiAoIWRvY3VtZW50KSB7XG4gICAgZG9jdW1lbnQgPSA8RG9jdW1lbnQ+IHt9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdG9JbnQodikge1xuICAgIGxldCBpID0gcGFyc2VJbnQodiwgMTApO1xuXG4gICAgaWYgKGkudG9TdHJpbmcoKSA9PT0gXCJOYU5cIikge1xuICAgICAgICBpID0gMDtcbiAgICB9XG5cbiAgICByZXR1cm4gaTtcbn1cblxuZXhwb3J0IGNsYXNzIFNuaWZmZXIge1xuICAgIGFuZHJvaWQ7XG4gICAgYW5pbWF0aW9ucztcbiAgICBjc3A7XG4gICAgaGlzdG9yeTtcbiAgICB0cmFuc2l0aW9ucztcbiAgICB2ZW5kb3JQcmVmaXg7XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgY29uc3QgZXZlbnRTdXBwb3J0ID0ge307XG4gICAgICAgIGNvbnN0IGJveGVlPSAvQm94ZWUvaS50ZXN0KCg8YW55PiAod2luZG93Lm5hdmlnYXRvciB8fCB7fSkpLnVzZXJBZ2VudCk7XG4gICAgICAgIGNvbnN0IGJvZHlTdHlsZSA9IGRvY3VtZW50LmJvZHkgJiYgZG9jdW1lbnQuYm9keS5zdHlsZTtcbiAgICAgICAgY29uc3QgdmVuZG9yUmVnZXggPSAvXihNb3p8d2Via2l0fG1zKSg/PVtBLVpdKS87XG4gICAgICAgIGxldCBtYXRjaDtcblxuICAgICAgICB0aGlzLmFuZHJvaWQgPSB0b0ludCgoL2FuZHJvaWQgKFxcZCspLy5leGVjKCg8YW55PiAod2luZG93Lm5hdmlnYXRvciB8fCB7fSkpLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpKSB8fCBbXSlbMV0pO1xuICAgICAgICB0aGlzLmFuaW1hdGlvbnMgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5jc3AgPSAoPGFueT4gZG9jdW1lbnQpLlNlY3VyaXR5UG9saWN5ID8gKDxhbnk+IGRvY3VtZW50KS5TZWN1cml0eVBvbGljeS5pc0FjdGl2ZSgpIDogZmFsc2U7XG4gICAgICAgIHRoaXMuaGlzdG9yeSA9ICEhKHdpbmRvdy5oaXN0b3J5ICYmIHdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZSAmJiAhKHRoaXMuYW5kcm9pZCA8IDQpICYmICFib3hlZSk7XG4gICAgICAgIHRoaXMudHJhbnNpdGlvbnMgPSBmYWxzZTtcblxuICAgICAgICBpZiAoYm9keVN0eWxlKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBwcm9wIGluIGJvZHlTdHlsZSkge1xuICAgICAgICAgICAgICAgIGlmIChtYXRjaCA9IHZlbmRvclJlZ2V4LmV4ZWMocHJvcCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy52ZW5kb3JQcmVmaXggPSBtYXRjaFswXTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy52ZW5kb3JQcmVmaXggPSB0aGlzLnZlbmRvclByZWZpeC5zdWJzdHIoMCwgMSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRvVXBwZXJDYXNlKCkgKyB0aGlzLnZlbmRvclByZWZpeC5zdWJzdHIoMSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCF0aGlzLnZlbmRvclByZWZpeCkge1xuICAgICAgICAgICAgICAgIHRoaXMudmVuZG9yUHJlZml4ID0gKFwiV2Via2l0T3BhY2l0eVwiIGluIGJvZHlTdHlsZSkgJiYgXCJ3ZWJraXRcIjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy50cmFuc2l0aW9ucyA9ICEhKChcInRyYW5zaXRpb25cIiBpbiBib2R5U3R5bGUpIHx8ICh0aGlzLnZlbmRvclByZWZpeCArIFwiVHJhbnNpdGlvblwiIGluIGJvZHlTdHlsZSkpO1xuICAgICAgICAgICAgdGhpcy5hbmltYXRpb25zICA9ICEhKChcImFuaW1hdGlvblwiIGluIGJvZHlTdHlsZSkgfHwgKHRoaXMudmVuZG9yUHJlZml4ICsgXCJBbmltYXRpb25cIiBpbiBib2R5U3R5bGUpKTtcblxuICAgICAgICAgICAgaWYgKHRoaXMuYW5kcm9pZCAmJiAoIXRoaXMudHJhbnNpdGlvbnMgfHwgICF0aGlzLmFuaW1hdGlvbnMpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy50cmFuc2l0aW9ucyA9IHR5cGVvZiAoYm9keVN0eWxlLndlYmtpdFRyYW5zaXRpb24pID09PSBcInN0cmluZ1wiO1xuICAgICAgICAgICAgICAgIHRoaXMuYW5pbWF0aW9ucyA9IHR5cGVvZiAoYm9keVN0eWxlLndlYmtpdEFuaW1hdGlvbikgPT09IFwic3RyaW5nXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=