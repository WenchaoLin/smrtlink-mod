"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var escapeXMLMap = {
    "&": "&amp;",
    "\"": "&quot;",
    "'": "&apos;",
    "<": "&lt;",
    ">": "&gt;"
};
var unescapeXMLMap = {
    "&amp;": "&",
    "&quot;": "\"",
    "&apos;": "'",
    "&lt;": "<",
    "&gt;": ">"
};
var escapeXMLRE = /[&"'<>]/g;
var unescapeXMLRE = /&(?:amp|quot|apos|lt|gt);/g;
var XMLElement = (function () {
    function XMLElement(node, doc, resolver) {
        var xnode = node;
        if (xnode) {
            if (xnode.xmlElement) {
                return xnode.xmlElement;
            }
            else {
                xnode.xmlElement = this;
            }
        }
        this.node = node;
        this.doc = doc;
        this.resolver = resolver;
    }
    Object.defineProperty(XMLElement.prototype, "type", {
        get: function () {
            return this.node.nodeType;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(XMLElement.prototype, "value", {
        get: function () {
            return this.node.nodeValue;
        },
        set: function (value) {
            this.node.nodeValue = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(XMLElement.prototype, "firstElementChild", {
        get: function () {
            var node = this.node;
            if (isElement(node)) {
                return new XMLElement(node.firstElementChild, this.doc, this.resolver);
            }
            return null;
        },
        enumerable: true,
        configurable: true
    });
    XMLElement.prototype.appendChild = function (element) {
        this.node.appendChild(element.node);
    };
    XMLElement.prototype.orphan = function () {
        this.node.parentNode.removeChild(this.node);
    };
    XMLElement.prototype.empty = function () {
        var child;
        while (child = this.node.childNodes[0]) {
            this.node.removeChild(child);
        }
    };
    XMLElement.prototype.getString = function (expression, context) {
        if (context === void 0) { context = this.node; }
        return unescapeXML(this.evaluate(expression, context, XPathResult.STRING_TYPE).stringValue);
    };
    XMLElement.prototype.setString = function (expression, value, context) {
        if (context === void 0) { context = this.node; }
        var element = this.getElement(expression, context);
        if (element.type === 2) {
            throw new Error("Use 'setAttribute()' to set the value of an attribute");
        }
        if (element.type === 3) {
            element.value = escapeXML(value);
        }
        else {
            element.empty();
            element.node.appendChild(this.doc.createTextNode(value));
        }
    };
    XMLElement.prototype.getNumber = function (expression, context) {
        if (context === void 0) { context = this.node; }
        return this.evaluate(expression, context, XPathResult.NUMBER_TYPE).numberValue;
    };
    XMLElement.prototype.setNumber = function (expression, value, context) {
        if (context === void 0) { context = this.node; }
        this.setString(expression, value.toString());
    };
    XMLElement.prototype.getElement = function (expression, context) {
        if (context === void 0) { context = this.node; }
        var node = this.evaluate(expression, context, XPathResult.FIRST_ORDERED_NODE_TYPE).singleNodeValue;
        if (!node) {
            return null;
        }
        return new XMLElement(node, this.doc, this.resolver);
    };
    XMLElement.prototype.getElements = function (expression, context) {
        if (context === void 0) { context = this.node; }
        var result = [];
        var xpathResult = this.evaluate(expression, context, XPathResult.ORDERED_NODE_ITERATOR_TYPE);
        if (xpathResult) {
            var node = void 0;
            while ((node = xpathResult.iterateNext())) {
                result.push(new XMLElement(node, this.doc, this.resolver));
            }
        }
        return result;
    };
    XMLElement.prototype.getAttribute = function (name) {
        var node = this.node;
        if (isElement(node)) {
            return node.getAttribute(name) || "";
        }
        return "";
    };
    XMLElement.prototype.hasAttribute = function (name) {
        var node = this.node;
        if (isElement(node)) {
            return node.hasAttribute(name);
        }
        return false;
    };
    XMLElement.prototype.setAttribute = function (name, value) {
        var node = this.node;
        if (isElement(node)) {
            node.setAttribute(name, escapeXML(String(value)));
        }
    };
    XMLElement.prototype.removeAttribute = function (name) {
        var node = this.node;
        if (isElement(node)) {
            node.removeAttribute(name);
        }
    };
    XMLElement.prototype.evaluate = function (expression, context, type) {
        if (context === void 0) { context = this.node; }
        return this.doc.evaluate(expression, context, this.resolver, type, null);
    };
    return XMLElement;
}());
exports.XMLElement = XMLElement;
function namespaceMapToAttributes(namespaces) {
    var strings = [];
    Object.keys(namespaces).forEach(function (key) {
        var ns = key === "default" ? "" : ":" + key;
        strings.push("xmlns" + ns + "=\"" + namespaces[key] + "\"");
    });
    return strings.join(" ");
}
var XMLDocument = (function (_super) {
    __extends(XMLDocument, _super);
    function XMLDocument(doc, namespaces) {
        var _this = this;
        _super.call(this);
        var xdoc = doc;
        if (xdoc.xmlDocument) {
            return xdoc.xmlDocument;
        }
        xdoc.xmlDocument = this;
        this.doc = doc;
        this.namespaces = namespaces;
        this.resolver = function (prefix) {
            return _this.namespaces[prefix] || _this.namespaces.default;
        };
        this.node = doc.documentElement;
    }
    XMLDocument.fromString = function (content, namespaces) {
        if (!/^<\?xml /.test(content)) {
            var namespacesString = namespaceMapToAttributes(namespaces);
            content = "<?xml version=\"1.0\" encoding=\"utf-8\"?><root " + namespacesString + ">" + content + "</root>";
        }
        var parser = new DOMParser();
        var doc = parser.parseFromString(content, "text/xml");
        var xdoc = new XMLDocument(doc, namespaces);
        return xdoc;
    };
    XMLDocument.prototype.createElement = function (tag) {
        var _a = tag.split(":"), namespace = _a[0], tagName = _a[1];
        if (!tagName) {
            tagName = namespace;
            namespace = null;
        }
        var domElement;
        if (namespace) {
            domElement = this.doc.createElementNS(this.resolver(namespace), tagName);
        }
        else {
            domElement = this.doc.createElement(tagName);
        }
        return new XMLElement(domElement, this.doc, this.resolver);
    };
    XMLDocument.prototype.createElementTree = function (xml) {
        var doc = XMLDocument.fromString(xml, this.namespaces);
        return this.importElement(doc.firstElementChild);
    };
    XMLDocument.prototype.importElement = function (element) {
        var node = this.doc.importNode(element.node, true);
        return new XMLElement(node, this.doc, this.resolver);
    };
    XMLDocument.prototype.toString = function () {
        var serializer = new XMLSerializer();
        return serializer.serializeToString(this.doc);
    };
    return XMLDocument;
}(XMLElement));
exports.XMLDocument = XMLDocument;
function escapeXML(input) {
    return replaceMap(input, escapeXMLRE, escapeXMLMap);
}
exports.escapeXML = escapeXML;
function unescapeXML(input) {
    return replaceMap(input, unescapeXMLRE, unescapeXMLMap);
}
exports.unescapeXML = unescapeXML;
exports.xml = (function () {
    var escapeRE = /^:escape/;
    function xml(strings) {
        var values = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            values[_i - 1] = arguments[_i];
        }
        var result = [strings[0]];
        values.forEach(function (value, index) {
            value = String(value);
            var nextString = strings[index + 1];
            if (escapeRE.test(nextString)) {
                value = escapeXML(value);
                nextString = nextString.replace(escapeRE, String.EMPTY);
            }
            result.push(value, nextString);
        });
        return result.join(String.EMPTY);
    }
    return xml;
})();
function replaceMap(input, regex, map) {
    return input.replace(regex, function (match) {
        return map[match];
    });
}
function isElement(node) {
    return node.nodeType === 1;
}

//# sourceMappingURL=data:application/json;base64,