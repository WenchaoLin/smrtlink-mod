"use strict";
var Tokenizer = (function () {
    function Tokenizer(tokenizers, doBuild) {
        this._tokenizers = tokenizers.splice ? tokenizers : [tokenizers];
        if (doBuild) {
            this._doBuild = doBuild;
        }
    }
    Tokenizer.replaceTokens = function (format, values) {
        var tokenizer = new Tokenizer([/<%(\w+)%>/, /\${(\w+)}/], function (src, real, re) {
            return real ? src.replace(re, function (all, name) {
                if (values[name] === "") {
                    return "";
                }
                return values[name] || "${%s}".sprintf(name);
            })
                : src;
        });
        return tokenizer.parse(format).join(String.EMPTY);
    };
    Tokenizer.prototype.parse = function (src) {
        this._src = src;
        this._ended = false;
        this._tokens = [];
        do {
            this._next();
        } while (!this._ended);
        return this._tokens;
    };
    Tokenizer.prototype.build = function (src, real) {
        if (src) {
            this._tokens.push(!this._doBuild ? src : this._doBuild(src, real, this._token));
        }
    };
    Tokenizer.prototype._next = function () {
        var self = this;
        var plain;
        self._findMin();
        plain = self._src.slice(0, self._min);
        self.build(plain, false);
        self._src = self._src.slice(self._min)
            .replace(self._token, function (all) {
            self.build(all, true);
            return "";
        });
        if (!self._src) {
            self._ended = true;
        }
    };
    Tokenizer.prototype._findMin = function () {
        var self = this;
        var i = 0;
        var token;
        var index;
        self._min = -1;
        self._token = "";
        while ((token = self._tokenizers[i++]) !== undefined) {
            index = self._src[token.test ? "search" : "indexOf"](token);
            if ((index !== -1) &&
                (self._min === -1 || index < self._min)) {
                self._token = token;
                self._min = index;
            }
        }
        if (self._min === -1) {
            self._min = self._src.length;
        }
    };
    return Tokenizer;
}());
exports.Tokenizer = Tokenizer;
exports.replaceTokens = Tokenizer.replaceTokens;

//# sourceMappingURL=data:application/json;base64,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QWEsR0FBRyxTQUFTLENBQUMsYUFBYSxDQUFDIiwiZmlsZSI6ImNvbW1vbi90b2tlbml6ZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY2xhc3MgVG9rZW5pemVyIHtcbiAgICBwcml2YXRlIF90b2tlbml6ZXJzO1xuICAgIHByaXZhdGUgX2RvQnVpbGQ7XG5cbiAgICBwcml2YXRlIF9zcmM7XG4gICAgcHJpdmF0ZSBfZW5kZWQ7XG4gICAgcHJpdmF0ZSBfdG9rZW5zO1xuICAgIHByaXZhdGUgX3Rva2VuO1xuICAgIHByaXZhdGUgX21pbjtcblxuICAgIHB1YmxpYyBzdGF0aWMgcmVwbGFjZVRva2Vucyhmb3JtYXQ6IHN0cmluZywgdmFsdWVzOiBhbnkpOiBzdHJpbmcge1xuICAgICAgICBjb25zdCB0b2tlbml6ZXIgPSBuZXcgVG9rZW5pemVyKFxuICAgICAgICAgICAgWy88JShcXHcrKSU+LywgL1xcJHsoXFx3Kyl9L10sXG4gICAgICAgICAgICBmdW5jdGlvbiAoc3JjLCByZWFsLCByZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiByZWFsID8gc3JjLnJlcGxhY2UocmUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAoYWxsLCBuYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlc1tuYW1lXSA9PT0gXCJcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlc1tuYW1lXSB8fCBcIiR7JXN9XCIuc3ByaW50ZihuYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBzcmM7XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG5cbiAgICAgICAgcmV0dXJuIHRva2VuaXplci5wYXJzZShmb3JtYXQpLmpvaW4oU3RyaW5nLkVNUFRZKTtcbiAgICB9XG5cbiAgICBjb25zdHJ1Y3Rvcih0b2tlbml6ZXJzLCBkb0J1aWxkPykge1xuICAgICAgICB0aGlzLl90b2tlbml6ZXJzID0gdG9rZW5pemVycy5zcGxpY2UgPyB0b2tlbml6ZXJzIDogWyB0b2tlbml6ZXJzIF07XG5cbiAgICAgICAgaWYgKGRvQnVpbGQpIHtcbiAgICAgICAgICAgIHRoaXMuX2RvQnVpbGQgPSBkb0J1aWxkO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcGFyc2Uoc3JjKSB7XG4gICAgICAgIHRoaXMuX3NyYyA9IHNyYztcbiAgICAgICAgdGhpcy5fZW5kZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fdG9rZW5zID0gWyBdO1xuXG4gICAgICAgIGRvIHtcbiAgICAgICAgICAgIHRoaXMuX25leHQoKTtcbiAgICAgICAgfSB3aGlsZSghdGhpcy5fZW5kZWQpO1xuXG4gICAgICAgIHJldHVybiB0aGlzLl90b2tlbnM7XG4gICAgfVxuXG4gICAgYnVpbGQoc3JjLCByZWFsKSB7XG4gICAgICAgIGlmIChzcmMpIHtcbiAgICAgICAgICAgIHRoaXMuX3Rva2Vucy5wdXNoKCF0aGlzLl9kb0J1aWxkID8gc3JjIDogdGhpcy5fZG9CdWlsZChzcmMsIHJlYWwsIHRoaXMuX3Rva2VuKSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIF9uZXh0KCkge1xuICAgICAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICAgICAgbGV0IHBsYWluO1xuXG4gICAgICAgIHNlbGYuX2ZpbmRNaW4oKTtcbiAgICAgICAgcGxhaW4gPSBzZWxmLl9zcmMuc2xpY2UoMCwgc2VsZi5fbWluKTtcbiAgICAgICAgc2VsZi5idWlsZChwbGFpbiwgZmFsc2UpO1xuXG4gICAgICAgIHNlbGYuX3NyYyA9IHNlbGYuX3NyYy5zbGljZShzZWxmLl9taW4pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2Uoc2VsZi5fdG9rZW4sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24oYWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuYnVpbGQoYWxsLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKCFzZWxmLl9zcmMpIHtcbiAgICAgICAgICAgIHNlbGYuX2VuZGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgX2ZpbmRNaW4oKSB7XG4gICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgICAgICBsZXQgaSA9IDA7XG4gICAgICAgIGxldCB0b2tlbjtcbiAgICAgICAgbGV0IGluZGV4O1xuXG4gICAgICAgIHNlbGYuX21pbiA9IC0xO1xuICAgICAgICBzZWxmLl90b2tlbiA9IFwiXCI7XG5cbiAgICAgICAgd2hpbGUgKCh0b2tlbiA9IHNlbGYuX3Rva2VuaXplcnNbaSsrXSkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaW5kZXggPSBzZWxmLl9zcmNbdG9rZW4udGVzdCA/IFwic2VhcmNoXCIgOiBcImluZGV4T2ZcIl0odG9rZW4pO1xuICAgICAgICAgICAgaWYgKChpbmRleCAhPT0gLTEpICYmXG4gICAgICAgICAgICAgICAgKHNlbGYuX21pbiA9PT0gLTEgfHwgaW5kZXggPCBzZWxmLl9taW4pKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuX3Rva2VuID0gdG9rZW47XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuX21pbiA9IGluZGV4O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNlbGYuX21pbiA9PT0gLTEpIHtcbiAgICAgICAgICAgIHNlbGYuX21pbiA9IHNlbGYuX3NyYy5sZW5ndGg7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCB2YXIgcmVwbGFjZVRva2VucyA9IFRva2VuaXplci5yZXBsYWNlVG9rZW5zOyJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==