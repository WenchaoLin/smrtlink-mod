"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("angular2/core");
var http_1 = require("angular2/http");
var Observable_1 = require("rxjs/Observable");
var http_2 = require("../../services/http");
var IO = (function () {
    function IO(http, servers) {
        this.http = http;
        this.servers = servers;
    }
    IO.prototype.signinAsync = function (authentication, credentials) {
    };
    IO.prototype.getEndpointAsync = function (endpoint, withParams) {
        var url = this.urlFor(endpoint.and(withParams));
        return this.httpGetDataAsync(url);
    };
    IO.prototype.postToEndpointAsync = function (data, endpoint, withParams) {
        var url = this.urlFor(endpoint.and(withParams));
        return this.httpPostDataAsync(url, data);
    };
    IO.prototype.deleteEndpointAsync = function (endpoint, withParams) {
        var url = this.urlFor(endpoint.and(withParams));
        return this.request(url, { method: "DELETE" });
    };
    IO.prototype.urlFor = function (endpoint) {
        return this.servers.getUrl("api://smrt-link/" + endpoint.url().replace("$job_type", "pbsmrtpipe"));
    };
    IO.prototype.request = function (url, options) {
        if (options === void 0) { options = null; }
        if (options) {
            var headers = new http_1.Headers(options.headers);
            options = new http_1.RequestOptions({
                method: options.method || "GET",
                body: options.body,
                headers: headers
            });
        }
        var method = options ? options.method : "GET";
        return this.http.request(url, options)
            .map(function (response) {
            if (response.status >= 200 && response.status < 300) {
                var type_1 = "";
                response.headers.keys().every(function (key) {
                    if (key.toLowerCase() === "content-type") {
                        type_1 = response.headers.get(key);
                        return false;
                    }
                    return true;
                });
                if (type_1.indexOf("application/json") > -1) {
                    return response.json();
                }
                return response.text();
            }
            else {
                throw response;
            }
        })
            .catch(function (error) {
            window.console.log("Error trying to " + method + " " + url);
            return Observable_1.Observable.throw(new TypeError("Network request failed"));
        })
            .toPromise();
    };
    IO.prototype.httpGetDataAsync = function (url) {
        return this.request(url);
    };
    IO.prototype.httpPostDataAsync = function (url, jsonData) {
        var options = {
            method: "post",
            mode: "cors-with-forced-preflight",
            body: JSON.stringify(jsonData),
            headers: {
                "Content-Type": "application/json"
            }
        };
        return this.request(url, options);
    };
    IO.prototype.httpPostDataStatusHeadersConfigAsync = function (data, url) {
    };
    IO = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [http_1.Http, http_2.APIServers])
    ], IO);
    return IO;
}());
exports.IO = IO;

//# sourceMappingURL=data:application/json;base64,