/**
 * @copyright Copyright (c) 2015, Pacific Biosciences of California, Inc.
 * @author <a href="mailto:bskinner@pacificbiosciences.com">Brian Skinner</a>
 */
"use strict";
var api_1 = require("../data/io/api");
var DatasetType = (function () {
    function DatasetType(datasetType) {
        this.filetype = datasetType.filetype;
        this.shortName = datasetType.shortName;
        this.title = datasetType.title;
        this.browseForTitle = datasetType.browseForTitle;
        this.filter = datasetType.filter;
        this.endpoint = api_1.API.aDatasetType.and({ $set_type: datasetType.shortName });
    }
    DatasetType.byShortName = function (shortName) {
        return DatasetType.by("shortName", shortName);
    };
    DatasetType.byFiletype = function (filetype) {
        return DatasetType.by("filetype", filetype);
    };
    DatasetType.by = function (prop, value) {
        for (var _i = 0, _a = DatasetType.DATASET_TYPES; _i < _a.length; _i++) {
            var datasetType = _a[_i];
            if (datasetType[prop] === value) {
                return datasetType;
            }
        }
        return null;
    };
    // TODO(bskinner)(2015-10-25): Instead of hard-coding this info,
    // we should be loading it from the "dataset-types" endpoint:
    //   http://smrtlink:8070/secondary-analysis/dataset-types;
    DatasetType.ALIGNMENT = new DatasetType({
        filetype: "PacBio.DataSet.AlignmentSet",
        shortName: "alignments",
        title: "Aligned Data"
    });
    DatasetType.BARCODE = new DatasetType({
        filetype: "PacBio.DataSet.BarcodeSet",
        shortName: "barcodes",
        title: "Barcode"
    });
    DatasetType.CONSENSUS_READ = new DatasetType({
        filetype: "PacBio.DataSet.ConsensusReadSet",
        shortName: "ccsreads",
        title: "Consensus Data"
    });
    DatasetType.CONSENSUS_ALIGNMENT = new DatasetType({
        filetype: "PacBio.DataSet.ConsensusAlignmentSet",
        shortName: "ccsalignments",
        title: "Consensus Alignment Data"
    });
    DatasetType.CONTIG = new DatasetType({
        filetype: "PacBio.DataSet.ContigSet",
        shortName: "contigs",
        title: "Contigs"
    });
    DatasetType.HDF_SUBREAD = new DatasetType({
        filetype: "PacBio.DataSet.HdfSubreadSet",
        shortName: "hdfsubreads",
        title: "RS II Data",
        browseForTitle: "Select a RS II sequence data file (*.hdfsubreadset.xml):",
        filter: "hdfsubreadset.xml"
    });
    DatasetType.REFERENCE = new DatasetType({
        filetype: "PacBio.DataSet.ReferenceSet",
        shortName: "references",
        title: "Reference",
        browseForTitle: "Select a Reference file (*.fa or *.fasta):",
        filter: ".fa,.fasta"
    });
    DatasetType.SUBREAD = new DatasetType({
        filetype: "PacBio.DataSet.SubreadSet",
        shortName: "subreads",
        title: "BAM Data",
        browseForTitle: "Select a Sequel sequence data file (*.subreadset.xml):",
        filter: ".subreadset.xml"
    });
    DatasetType.DATASET_TYPES = [
        DatasetType.ALIGNMENT,
        DatasetType.BARCODE,
        DatasetType.CONSENSUS_READ,
        DatasetType.CONSENSUS_ALIGNMENT,
        DatasetType.CONTIG,
        DatasetType.HDF_SUBREAD,
        DatasetType.REFERENCE,
        DatasetType.SUBREAD
    ];
    return DatasetType;
}());
exports.DatasetType = DatasetType;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC9kYXRhL2RhdGFzZXQtdHlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0dBR0c7O0FBR0gsb0JBQWtCLGdCQUFnQixDQUFDLENBQUE7QUFVbkM7SUFvRUkscUJBQVksV0FBeUI7UUFDakMsSUFBSSxDQUFDLFFBQVEsR0FBRyxXQUFXLENBQUMsUUFBUSxDQUFDO1FBQ3JDLElBQUksQ0FBQyxTQUFTLEdBQUcsV0FBVyxDQUFDLFNBQVMsQ0FBQztRQUN2QyxJQUFJLENBQUMsS0FBSyxHQUFHLFdBQVcsQ0FBQyxLQUFLLENBQUM7UUFDL0IsSUFBSSxDQUFDLGNBQWMsR0FBRyxXQUFXLENBQUMsY0FBYyxDQUFDO1FBQ2pELElBQUksQ0FBQyxNQUFNLEdBQUcsV0FBVyxDQUFDLE1BQU0sQ0FBQztRQUVqQyxJQUFJLENBQUMsUUFBUSxHQUFHLFNBQUcsQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLEVBQUMsU0FBUyxFQUFFLFdBQVcsQ0FBQyxTQUFTLEVBQUMsQ0FBQyxDQUFDO0lBQzdFLENBQUM7SUFFTSx1QkFBVyxHQUFsQixVQUFtQixTQUFpQjtRQUNoQyxNQUFNLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxXQUFXLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDbEQsQ0FBQztJQUVNLHNCQUFVLEdBQWpCLFVBQWtCLFFBQWdCO1FBQzlCLE1BQU0sQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLFVBQVUsRUFBRSxRQUFRLENBQUMsQ0FBQztJQUNoRCxDQUFDO0lBRWMsY0FBRSxHQUFqQixVQUFrQixJQUFZLEVBQUUsS0FBYTtRQUN6QyxHQUFHLENBQUMsQ0FBb0IsVUFBeUIsRUFBekIsS0FBQSxXQUFXLENBQUMsYUFBYSxFQUF6QixjQUF5QixFQUF6QixJQUF5QixDQUFDO1lBQTdDLElBQUksV0FBVyxTQUFBO1lBQ2hCLEVBQUUsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsS0FBSyxLQUFLLENBQUMsQ0FBQyxDQUFDO2dCQUM5QixNQUFNLENBQUMsV0FBVyxDQUFDO1lBQ3ZCLENBQUM7U0FDSjtRQUNELE1BQU0sQ0FBQyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQTVGRCxnRUFBZ0U7SUFDaEUsNkRBQTZEO0lBQzdELDJEQUEyRDtJQUNwRCxxQkFBUyxHQUFHLElBQUksV0FBVyxDQUFDO1FBQy9CLFFBQVEsRUFBRSw2QkFBNkI7UUFDdkMsU0FBUyxFQUFFLFlBQVk7UUFDdkIsS0FBSyxFQUFFLGNBQWM7S0FDeEIsQ0FBQyxDQUFDO0lBQ0ksbUJBQU8sR0FBRyxJQUFJLFdBQVcsQ0FBQztRQUM3QixRQUFRLEVBQUUsMkJBQTJCO1FBQ3JDLFNBQVMsRUFBRSxVQUFVO1FBQ3JCLEtBQUssRUFBRSxTQUFTO0tBQ25CLENBQUMsQ0FBQztJQUNJLDBCQUFjLEdBQUcsSUFBSSxXQUFXLENBQUM7UUFDcEMsUUFBUSxFQUFFLGlDQUFpQztRQUMzQyxTQUFTLEVBQUUsVUFBVTtRQUNyQixLQUFLLEVBQUUsZ0JBQWdCO0tBQzFCLENBQUMsQ0FBQztJQUNJLCtCQUFtQixHQUFHLElBQUksV0FBVyxDQUFDO1FBQ3pDLFFBQVEsRUFBRSxzQ0FBc0M7UUFDaEQsU0FBUyxFQUFFLGVBQWU7UUFDMUIsS0FBSyxFQUFFLDBCQUEwQjtLQUNwQyxDQUFDLENBQUM7SUFDSSxrQkFBTSxHQUFHLElBQUksV0FBVyxDQUFDO1FBQzVCLFFBQVEsRUFBRSwwQkFBMEI7UUFDcEMsU0FBUyxFQUFFLFNBQVM7UUFDcEIsS0FBSyxFQUFFLFNBQVM7S0FDbkIsQ0FBQyxDQUFDO0lBQ0ksdUJBQVcsR0FBRyxJQUFJLFdBQVcsQ0FBQztRQUNqQyxRQUFRLEVBQUUsOEJBQThCO1FBQ3hDLFNBQVMsRUFBRSxhQUFhO1FBQ3hCLEtBQUssRUFBRSxZQUFZO1FBQ25CLGNBQWMsRUFBRSwwREFBMEQ7UUFDMUUsTUFBTSxFQUFFLG1CQUFtQjtLQUM5QixDQUFDLENBQUM7SUFDSSxxQkFBUyxHQUFHLElBQUksV0FBVyxDQUFDO1FBQy9CLFFBQVEsRUFBRSw2QkFBNkI7UUFDdkMsU0FBUyxFQUFFLFlBQVk7UUFDdkIsS0FBSyxFQUFFLFdBQVc7UUFDbEIsY0FBYyxFQUFFLDRDQUE0QztRQUM1RCxNQUFNLEVBQUUsWUFBWTtLQUN2QixDQUFDLENBQUM7SUFDSSxtQkFBTyxHQUFHLElBQUksV0FBVyxDQUFDO1FBQzdCLFFBQVEsRUFBRSwyQkFBMkI7UUFDckMsU0FBUyxFQUFFLFVBQVU7UUFDckIsS0FBSyxFQUFFLFVBQVU7UUFDakIsY0FBYyxFQUFFLHdEQUF3RDtRQUN4RSxNQUFNLEVBQUUsaUJBQWlCO0tBQzVCLENBQUMsQ0FBQztJQUNJLHlCQUFhLEdBQUc7UUFDbkIsV0FBVyxDQUFDLFNBQVM7UUFDckIsV0FBVyxDQUFDLE9BQU87UUFDbkIsV0FBVyxDQUFDLGNBQWM7UUFDMUIsV0FBVyxDQUFDLG1CQUFtQjtRQUMvQixXQUFXLENBQUMsTUFBTTtRQUNsQixXQUFXLENBQUMsV0FBVztRQUN2QixXQUFXLENBQUMsU0FBUztRQUNyQixXQUFXLENBQUMsT0FBTztLQUN0QixDQUFDO0lBb0NOLGtCQUFDO0FBQUQsQ0EvRkEsQUErRkMsSUFBQTtBQS9GWSxtQkFBVyxjQStGdkIsQ0FBQSIsImZpbGUiOiJhcHAvZGF0YS9kYXRhc2V0LXR5cGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBjb3B5cmlnaHQgQ29weXJpZ2h0IChjKSAyMDE1LCBQYWNpZmljIEJpb3NjaWVuY2VzIG9mIENhbGlmb3JuaWEsIEluYy5cbiAqIEBhdXRob3IgPGEgaHJlZj1cIm1haWx0bzpic2tpbm5lckBwYWNpZmljYmlvc2NpZW5jZXMuY29tXCI+QnJpYW4gU2tpbm5lcjwvYT5cbiAqL1xuXG5pbXBvcnQge0VuZHBvaW50fSBmcm9tIFwiYXRoZW5hZXVtL2RhdGEvYXBpL2VuZHBvaW50XCI7XG5pbXBvcnQge0FQSX0gZnJvbSBcIi4uL2RhdGEvaW8vYXBpXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSURhdGFzZXRUeXBlIHtcbiAgICBmaWxldHlwZTogc3RyaW5nO1xuICAgIHNob3J0TmFtZTogc3RyaW5nO1xuICAgIHRpdGxlOiBzdHJpbmc7XG4gICAgYnJvd3NlRm9yVGl0bGU/OiBzdHJpbmc7XG4gICAgZmlsdGVyPzogc3RyaW5nO1xufVxuXG5leHBvcnQgY2xhc3MgRGF0YXNldFR5cGUge1xuICAgIC8vIFRPRE8oYnNraW5uZXIpKDIwMTUtMTAtMjUpOiBJbnN0ZWFkIG9mIGhhcmQtY29kaW5nIHRoaXMgaW5mbyxcbiAgICAvLyB3ZSBzaG91bGQgYmUgbG9hZGluZyBpdCBmcm9tIHRoZSBcImRhdGFzZXQtdHlwZXNcIiBlbmRwb2ludDpcbiAgICAvLyAgIGh0dHA6Ly9zbXJ0bGluazo4MDcwL3NlY29uZGFyeS1hbmFseXNpcy9kYXRhc2V0LXR5cGVzO1xuICAgIHN0YXRpYyBBTElHTk1FTlQgPSBuZXcgRGF0YXNldFR5cGUoe1xuICAgICAgICBmaWxldHlwZTogXCJQYWNCaW8uRGF0YVNldC5BbGlnbm1lbnRTZXRcIixcbiAgICAgICAgc2hvcnROYW1lOiBcImFsaWdubWVudHNcIixcbiAgICAgICAgdGl0bGU6IFwiQWxpZ25lZCBEYXRhXCJcbiAgICB9KTtcbiAgICBzdGF0aWMgQkFSQ09ERSA9IG5ldyBEYXRhc2V0VHlwZSh7XG4gICAgICAgIGZpbGV0eXBlOiBcIlBhY0Jpby5EYXRhU2V0LkJhcmNvZGVTZXRcIixcbiAgICAgICAgc2hvcnROYW1lOiBcImJhcmNvZGVzXCIsXG4gICAgICAgIHRpdGxlOiBcIkJhcmNvZGVcIlxuICAgIH0pO1xuICAgIHN0YXRpYyBDT05TRU5TVVNfUkVBRCA9IG5ldyBEYXRhc2V0VHlwZSh7XG4gICAgICAgIGZpbGV0eXBlOiBcIlBhY0Jpby5EYXRhU2V0LkNvbnNlbnN1c1JlYWRTZXRcIixcbiAgICAgICAgc2hvcnROYW1lOiBcImNjc3JlYWRzXCIsXG4gICAgICAgIHRpdGxlOiBcIkNvbnNlbnN1cyBEYXRhXCJcbiAgICB9KTtcbiAgICBzdGF0aWMgQ09OU0VOU1VTX0FMSUdOTUVOVCA9IG5ldyBEYXRhc2V0VHlwZSh7XG4gICAgICAgIGZpbGV0eXBlOiBcIlBhY0Jpby5EYXRhU2V0LkNvbnNlbnN1c0FsaWdubWVudFNldFwiLFxuICAgICAgICBzaG9ydE5hbWU6IFwiY2NzYWxpZ25tZW50c1wiLFxuICAgICAgICB0aXRsZTogXCJDb25zZW5zdXMgQWxpZ25tZW50IERhdGFcIlxuICAgIH0pO1xuICAgIHN0YXRpYyBDT05USUcgPSBuZXcgRGF0YXNldFR5cGUoe1xuICAgICAgICBmaWxldHlwZTogXCJQYWNCaW8uRGF0YVNldC5Db250aWdTZXRcIixcbiAgICAgICAgc2hvcnROYW1lOiBcImNvbnRpZ3NcIixcbiAgICAgICAgdGl0bGU6IFwiQ29udGlnc1wiXG4gICAgfSk7XG4gICAgc3RhdGljIEhERl9TVUJSRUFEID0gbmV3IERhdGFzZXRUeXBlKHtcbiAgICAgICAgZmlsZXR5cGU6IFwiUGFjQmlvLkRhdGFTZXQuSGRmU3VicmVhZFNldFwiLFxuICAgICAgICBzaG9ydE5hbWU6IFwiaGRmc3VicmVhZHNcIixcbiAgICAgICAgdGl0bGU6IFwiUlMgSUkgRGF0YVwiLFxuICAgICAgICBicm93c2VGb3JUaXRsZTogXCJTZWxlY3QgYSBSUyBJSSBzZXF1ZW5jZSBkYXRhIGZpbGUgKCouaGRmc3VicmVhZHNldC54bWwpOlwiLFxuICAgICAgICBmaWx0ZXI6IFwiaGRmc3VicmVhZHNldC54bWxcIlxuICAgIH0pO1xuICAgIHN0YXRpYyBSRUZFUkVOQ0UgPSBuZXcgRGF0YXNldFR5cGUoe1xuICAgICAgICBmaWxldHlwZTogXCJQYWNCaW8uRGF0YVNldC5SZWZlcmVuY2VTZXRcIixcbiAgICAgICAgc2hvcnROYW1lOiBcInJlZmVyZW5jZXNcIixcbiAgICAgICAgdGl0bGU6IFwiUmVmZXJlbmNlXCIsXG4gICAgICAgIGJyb3dzZUZvclRpdGxlOiBcIlNlbGVjdCBhIFJlZmVyZW5jZSBmaWxlICgqLmZhIG9yICouZmFzdGEpOlwiLFxuICAgICAgICBmaWx0ZXI6IFwiLmZhLC5mYXN0YVwiXG4gICAgfSk7XG4gICAgc3RhdGljIFNVQlJFQUQgPSBuZXcgRGF0YXNldFR5cGUoe1xuICAgICAgICBmaWxldHlwZTogXCJQYWNCaW8uRGF0YVNldC5TdWJyZWFkU2V0XCIsXG4gICAgICAgIHNob3J0TmFtZTogXCJzdWJyZWFkc1wiLFxuICAgICAgICB0aXRsZTogXCJCQU0gRGF0YVwiLFxuICAgICAgICBicm93c2VGb3JUaXRsZTogXCJTZWxlY3QgYSBTZXF1ZWwgc2VxdWVuY2UgZGF0YSBmaWxlICgqLnN1YnJlYWRzZXQueG1sKTpcIixcbiAgICAgICAgZmlsdGVyOiBcIi5zdWJyZWFkc2V0LnhtbFwiXG4gICAgfSk7XG4gICAgc3RhdGljIERBVEFTRVRfVFlQRVMgPSBbXG4gICAgICAgIERhdGFzZXRUeXBlLkFMSUdOTUVOVCxcbiAgICAgICAgRGF0YXNldFR5cGUuQkFSQ09ERSxcbiAgICAgICAgRGF0YXNldFR5cGUuQ09OU0VOU1VTX1JFQUQsXG4gICAgICAgIERhdGFzZXRUeXBlLkNPTlNFTlNVU19BTElHTk1FTlQsXG4gICAgICAgIERhdGFzZXRUeXBlLkNPTlRJRyxcbiAgICAgICAgRGF0YXNldFR5cGUuSERGX1NVQlJFQUQsXG4gICAgICAgIERhdGFzZXRUeXBlLlJFRkVSRU5DRSxcbiAgICAgICAgRGF0YXNldFR5cGUuU1VCUkVBRFxuICAgIF07XG5cbiAgICBwdWJsaWMgZmlsZXR5cGU6IHN0cmluZztcbiAgICBwdWJsaWMgc2hvcnROYW1lOiBzdHJpbmc7XG4gICAgcHVibGljIHRpdGxlOiBzdHJpbmc7XG4gICAgcHVibGljIGJyb3dzZUZvclRpdGxlOiBzdHJpbmc7XG4gICAgcHVibGljIGZpbHRlcjogc3RyaW5nO1xuICAgIHB1YmxpYyBlbmRwb2ludDogRW5kcG9pbnQ7XG5cbiAgICBjb25zdHJ1Y3RvcihkYXRhc2V0VHlwZTogSURhdGFzZXRUeXBlKSB7XG4gICAgICAgIHRoaXMuZmlsZXR5cGUgPSBkYXRhc2V0VHlwZS5maWxldHlwZTtcbiAgICAgICAgdGhpcy5zaG9ydE5hbWUgPSBkYXRhc2V0VHlwZS5zaG9ydE5hbWU7XG4gICAgICAgIHRoaXMudGl0bGUgPSBkYXRhc2V0VHlwZS50aXRsZTtcbiAgICAgICAgdGhpcy5icm93c2VGb3JUaXRsZSA9IGRhdGFzZXRUeXBlLmJyb3dzZUZvclRpdGxlO1xuICAgICAgICB0aGlzLmZpbHRlciA9IGRhdGFzZXRUeXBlLmZpbHRlcjtcblxuICAgICAgICB0aGlzLmVuZHBvaW50ID0gQVBJLmFEYXRhc2V0VHlwZS5hbmQoeyRzZXRfdHlwZTogZGF0YXNldFR5cGUuc2hvcnROYW1lfSk7XG4gICAgfVxuXG4gICAgc3RhdGljIGJ5U2hvcnROYW1lKHNob3J0TmFtZTogc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiBEYXRhc2V0VHlwZS5ieShcInNob3J0TmFtZVwiLCBzaG9ydE5hbWUpO1xuICAgIH1cblxuICAgIHN0YXRpYyBieUZpbGV0eXBlKGZpbGV0eXBlOiBzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIERhdGFzZXRUeXBlLmJ5KFwiZmlsZXR5cGVcIiwgZmlsZXR5cGUpO1xuICAgIH1cblxuICAgIHByaXZhdGUgc3RhdGljIGJ5KHByb3A6IHN0cmluZywgdmFsdWU6IHN0cmluZykge1xuICAgICAgICBmb3IgKGxldCBkYXRhc2V0VHlwZSBvZiBEYXRhc2V0VHlwZS5EQVRBU0VUX1RZUEVTKSB7XG4gICAgICAgICAgICBpZiAoZGF0YXNldFR5cGVbcHJvcF0gPT09IHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhdGFzZXRUeXBlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxufVxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9