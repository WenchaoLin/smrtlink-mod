/**
 * @copyright Copyright (c) 2015, Pacific Biosciences of California, Inc.
 * @author <a href="mailto:bskinner@pacificbiosciences.com">Brian Skinner</a>
 */
"use strict";
var frame_1 = require("../frames/frame");
var api_1 = require("../io/api");
exports.SUBREAD_FRAME = new frame_1.Frame({
    endpoint: api_1.API.aDatasetType.and({ $set_type: "subreads" }),
    processFetchedData: function (promise) {
        // TODO(bskinner)(2015-12-07): refactor this with frames/hdf-subread.ts
        // TODO(bskinner)(2015-12-07): remove once bug 30038 is fixed
        return new Promise(function (resolve, reject) {
            promise.then(function (list) { return resolve(list.filter(frame_1.autoMergeFilter)); });
            promise.catch(function (reason) { return reject(reason); });
        });
    },
    properties: {
        name: {
            title: "Name",
            description: "",
            type: "string",
            idField: "id"
        },
        cellIndex: {
            title: "Cell Index",
            description: "",
            type: "integer"
        },
        updatedAt: {
            title: "Date Updated",
            description: "",
            type: "string",
            format: "date-time"
        },
        numRecords: {
            title: "Number of Records",
            description: "",
            type: "integer"
        },
        totalLength: {
            title: "Total Length",
            description: "",
            type: "integer"
        },
        createdAt: {
            title: "Date Created",
            description: "",
            type: "string",
            format: "date-time"
        },
        id: {
            title: "Id",
            description: "",
            type: "string"
        },
        uuid: {
            title: "UUID",
            description: "",
            type: "string"
        },
        path: {
            title: "Path",
            description: "",
            type: "string"
        },
        runName: {
            title: "Run Name",
            description: "",
            type: "string"
        },
        plateId: {
            title: "Plate Id",
            description: "",
            type: "string"
        },
        instrumentName: {
            title: "Instrument Name",
            description: "",
            type: "string"
        },
        wellName: {
            title: "Well Name",
            description: "",
            type: "string"
        },
        wellSampleName: {
            title: "Well Sample Name",
            description: "",
            type: "string"
        },
        bioSampleName: {
            title: "Bio Sample Name",
            description: "",
            type: "string"
        },
        metadataContextId: {
            title: "Metadata Context Id",
            description: "",
            type: "string"
        },
        tags: {
            title: "Tags",
            description: "",
            type: "string"
        },
        projectId: {
            title: "Project Id",
            description: "",
            type: "integer"
        },
        jobId: {
            title: "Job Id",
            description: "",
            type: "integer"
        },
        version: {
            title: "Version",
            description: "",
            type: "string"
        },
        md5: {
            title: "MD5",
            description: "",
            type: "string"
        },
        userId: {
            title: "User Id",
            description: "",
            type: "integer"
        },
        comments: {
            title: "Comments",
            description: "",
            type: "string"
        }
    }
});

//# sourceMappingURL=data:application/json;base64,