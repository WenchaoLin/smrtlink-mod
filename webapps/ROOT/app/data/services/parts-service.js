"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var core_1 = require("angular2/core");
exports.PART_NUMBERS_JSON = new core_1.OpaqueToken("PART_NUMBERS_JSON");
(function (PartType) {
    PartType[PartType["Workflow"] = 0] = "Workflow";
    PartType[PartType["BindingKit"] = 1] = "BindingKit";
    PartType[PartType["TemplatePrepKit"] = 2] = "TemplatePrepKit";
    PartType[PartType["SequencingKit"] = 3] = "SequencingKit";
    PartType[PartType["ControlKit"] = 4] = "ControlKit";
    PartType[PartType["CellPack"] = 5] = "CellPack";
    PartType[PartType["OSEnzyme"] = 6] = "OSEnzyme";
    PartType[PartType["CellMineralOil"] = 7] = "CellMineralOil";
})(exports.PartType || (exports.PartType = {}));
var PartType = exports.PartType;
function isBindingKit(object) {
    return object.type === PartType.BindingKit;
}
exports.isBindingKit = isBindingKit;
function isControlKit(object) {
    return object.type === PartType.ControlKit;
}
exports.isControlKit = isControlKit;
function isSequencingKit(object) {
    return object.type === PartType.SequencingKit;
}
exports.isSequencingKit = isSequencingKit;
function isTemplatePrepKit(object) {
    return object.type === PartType.TemplatePrepKit;
}
exports.isTemplatePrepKit = isTemplatePrepKit;
var prefixMap = {
    WFA: PartType.Workflow,
    BDK: PartType.BindingKit,
    TPK: PartType.TemplatePrepKit,
    SQK: PartType.SequencingKit,
    CCK: PartType.ControlKit,
    CPK: PartType.CellPack,
    OSE: PartType.OSEnzyme,
    CMO: PartType.CellMineralOil
};
var barcodePattern = /^[A-Z0-9]{6}[0-9]{9}[0-9]{6}$/;
var PartsService = (function () {
    function PartsService(json) {
        var _this = this;
        this.parts = {};
        this.bindingKits = {};
        this.controlKits = {};
        this.sequencingKits = {};
        this.templateKits = {};
        json.parts.forEach(function (partJSON) {
            var part = {};
            Object.keys(partJSON).forEach(function (key) {
                var partValue = partJSON[key];
                if (key === "PartNumber") {
                    part.type = prefixMap[partValue.slice(0, 3)];
                    partValue = partValue.slice(4);
                }
                part[key.charAt(0).toLowerCase() + key.slice(1)] = partValue;
            });
            _this.parts[part.partNumber] = part;
            if (isBindingKit(part)) {
                _this.bindingKits[part.partNumber] = part;
            }
            else if (isSequencingKit(part)) {
                _this.sequencingKits[part.partNumber] = part;
            }
            else if (isControlKit(part)) {
                _this.controlKits[part.partNumber] = part;
            }
            else if (isTemplatePrepKit(part)) {
                _this.templateKits[part.partNumber] = part;
            }
        });
    }
    PartsService.prototype.getPart = function (partNumber) {
        var part = this.parts[partNumber];
        if (part) {
            return Object.assign({}, part);
        }
        return null;
    };
    PartsService.prototype.getBindingKit = function (partNumber) {
        var part = this.getPart(partNumber);
        if (part && isBindingKit(part)) {
            return part;
        }
        return null;
    };
    PartsService.prototype.getControlKit = function (partNumber) {
        var part = this.getPart(partNumber);
        if (part && isControlKit(part)) {
            return part;
        }
        return null;
    };
    PartsService.prototype.getSequencingKit = function (partNumber) {
        var part = this.getPart(partNumber);
        if (part && isSequencingKit(part)) {
            return part;
        }
        return null;
    };
    PartsService.prototype.getTemplatePrepKit = function (partNumber) {
        var part = this.getPart(partNumber);
        if (part && isTemplatePrepKit(part)) {
            return part;
        }
        return null;
    };
    PartsService.prototype.fromBarcode = function (barcode) {
        var info = this.parseBarcode(barcode);
        var object = this.parts[info.partNumber];
        if (object) {
            return Object.assign({}, object);
        }
        return null;
    };
    PartsService.prototype.bindingKitFromBarcode = function (barcode) {
        var object = this.fromBarcode(barcode);
        if (object && isBindingKit(object)) {
            return object;
        }
        return null;
    };
    PartsService.prototype.controlKitFromBarcode = function (barcode) {
        var object = this.fromBarcode(barcode);
        if (object && isControlKit(object)) {
            return object;
        }
        return null;
    };
    PartsService.prototype.sequencingKitFromBarcode = function (barcode) {
        var object = this.fromBarcode(barcode);
        if (object && isSequencingKit(object)) {
            return object;
        }
        return null;
    };
    PartsService.prototype.templatePrepKitFromBarcode = function (barcode) {
        var object = this.fromBarcode(barcode);
        if (object && isTemplatePrepKit(object)) {
            return object;
        }
        return null;
    };
    PartsService.prototype.partNumberFromName = function (name) {
        var _this = this;
        var partNumber = String.EMPTY;
        Object.keys(this.parts).some(function (key) {
            var part = _this.parts[key];
            if (part.name === name) {
                partNumber = key;
                return true;
            }
            return false;
        });
        return partNumber;
    };
    PartsService.prototype.parseBarcode = function (barcode) {
        if (!barcodePattern.test(barcode)) {
            return null;
        }
        var lotNumber = barcode.slice(0, 6);
        var rawPartNumber = barcode.slice(6, 15);
        var rawExpDate = barcode.slice(15);
        var partNumber = "%s-%s-%s".sprintf(rawPartNumber.slice(0, 3), rawPartNumber.slice(3, 6), rawPartNumber.slice(6));
        var expDate = "20%s-%s-%s".sprintf(rawExpDate.slice(4), rawExpDate.slice(0, 2), rawExpDate.slice(2, 4));
        return {
            lotNumber: lotNumber,
            partNumber: partNumber,
            expDate: expDate
        };
    };
    PartsService = __decorate([
        __param(0, core_1.Inject(exports.PART_NUMBERS_JSON)), 
        __metadata('design:paramtypes', [Object])
    ], PartsService);
    return PartsService;
}());
exports.PartsService = PartsService;

//# sourceMappingURL=data:application/json;base64,