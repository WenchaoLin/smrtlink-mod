/**
 * @copyright Copyright (c) 2015, Pacific Biosciences of California, Inc.
 * @author <a href="mailto:bskinner@pacificbiosciences.com">Brian Skinner</a>
 */
"use strict";
var endpoint_1 = require("athenaeum/data/api/endpoint");
var API = (function () {
    function API() {
    }
    /* tslint:disable:max-line-length */
    API.nComponents = new endpoint_1.Endpoint("components");
    API.config = new endpoint_1.Endpoint("config");
    // Health
    API.health = new endpoint_1.Endpoint("health");
    API.nGauges = new endpoint_1.Endpoint("health/gauges", { $gauge_dotdotid: "id" });
    API.aGauge = new endpoint_1.Endpoint("health/gauges/$gauge_dotdotid");
    API.nGaugeMessages = new endpoint_1.Endpoint("health/gauges/$gauge_dotdotid/messages");
    // Logging
    API.nLoggers = new endpoint_1.Endpoint("loggers", { $logger_dotdotid: "id" });
    API.aLogger = new endpoint_1.Endpoint("loggers/$logger_dotdotid");
    API.nLoggerMessages = new endpoint_1.Endpoint("loggers/$logger_dotdotid/messages");
    API.nSystemMessages = new endpoint_1.Endpoint("loggers/system/messages");
    // Data Sets
    API.nDatasetTypes = new endpoint_1.Endpoint("secondary-analysis/dataset-types", { $set_type: "id" });
    API.aDatasetType = new endpoint_1.Endpoint("secondary-analysis/datasets/$set_type", { $set_int: "id", $set_uuid: "uuid" });
    API.aDatasetTypeSchema = new endpoint_1.Endpoint("secondary-analysis/datasets/$set_type/_schema");
    API.aDatasetByInt = new endpoint_1.Endpoint("secondary-analysis/datasets/$set_type/$set_int");
    API.aDatasetByUuid = new endpoint_1.Endpoint("secondary-analysis/datasets/$set_type/$set_uuid");
    API.aDatasetDetailsByInt = new endpoint_1.Endpoint("secondary-analysis/datasets/$set_type/$set_int/details");
    API.aDatasetDetailsByUuid = new endpoint_1.Endpoint("secondary-analysis/datasets/$set_type/$set_uuid/details");
    API.anyDatasetByInt = new endpoint_1.Endpoint("secondary-analysis/datasets/$set_int");
    API.anyDatasetByUuid = new endpoint_1.Endpoint("secondary-analysis/datasets/$set_uuid");
    API.nDataStoreFiles = new endpoint_1.Endpoint("secondary-analysis/datastore-files");
    // Jobs
    API.nJobTypes = new endpoint_1.Endpoint("secondary-analysis/job-manager/job-types", { $job_type: "jobTypeId" });
    API.jobManagerConfig = new endpoint_1.Endpoint("secondary-analysis/job-manager/config");
    API.nJobs = new endpoint_1.Endpoint("secondary-analysis/job-manager/jobs/$job_type", { $job_int: "id" });
    API.aJob = new endpoint_1.Endpoint("secondary-analysis/job-manager/jobs/$job_type/$job_int");
    API.nJobEvents = new endpoint_1.Endpoint("secondary-analysis/job-manager/jobs/$job_type/$job_int/events");
    API.nJobEntryPoints = new endpoint_1.Endpoint("secondary-analysis/job-manager/jobs/$job_type/$job_int/entry-points");
    API.nJobOptions = new endpoint_1.Endpoint("secondary-analysis/job-manager/jobs/$job_type/$job_int/options");
    API.nJobReports = new endpoint_1.Endpoint("secondary-analysis/job-manager/jobs/$job_type/$job_int/reports", { $report_uuid: "dataStoreFile.uuid" });
    API.aJobReport = new endpoint_1.Endpoint("secondary-analysis/job-manager/jobs/$job_type/$job_int/reports/$report_uuid", { $file_name: "plotGroups.plots.image" });
    API.aJobReportResource = new endpoint_1.Endpoint("secondary-analysis/job-manager/jobs/$job_type/$job_int/resources?id=$file_name");
    API.aJobLog = new endpoint_1.Endpoint("secondary-analysis/job-manager/jobs/$job_type/$job_int/resources?id=master.log");
    API.nJobDatastores = new endpoint_1.Endpoint("secondary-analysis/job-manager/jobs/$job_type/$job_int/datastore", { $store_uuid: "uuid" });
    API.aJobDatastore = new endpoint_1.Endpoint("secondary-analysis/job-manager/jobs/$job_type/$job_int/datastore/$store_uuid");
    API.aJobFileDownload = new endpoint_1.Endpoint("secondary-analysis/job-manager/jobs/$job_type/$job_int/datastore/$store_uuid/download");
    API.aImportJob = new endpoint_1.Endpoint("secondary-analysis/job-manager/jobs/import-dataset");
    API.aMergeJob = new endpoint_1.Endpoint("secondary-analysis/job-manager/jobs/merge-datasets");
    API.nPipelineTemplates = new endpoint_1.Endpoint("secondary-analysis/resolved-pipeline-templates", { $pt_dotdotid: "id" });
    API.aPipelineTemplate = new endpoint_1.Endpoint("secondary-analysis/resolved-pipeline-templates/$pt_dotdotid");
    API.nPresets = new endpoint_1.Endpoint("secondary-analysis/resolved-pipeline-templates/$pt_dotdotid/presets", { $preset_dotdotid: "id" });
    API.aPreset = new endpoint_1.Endpoint("secondary-analysis/resolved-pipeline-templates/$pt_dotdotid/presets/$preset_dotdotid");
    API.nReportViewRules = new endpoint_1.Endpoint("secondary-analysis/report-view-rules", { $report_type: "id" });
    API.aReportViewRule = new endpoint_1.Endpoint("secondary-analysis/report-view-rules/$report_type");
    API.nPipelineViewRules = new endpoint_1.Endpoint("secondary-analysis/pipeline-template-view-rules", { $pt_dotdotid2: "id" });
    API.aPipelineViewRules = new endpoint_1.Endpoint("secondary-analysis/pipeline-template-view-rules/$pt_dotdotid2");
    /* tslint:enable:max-line-length */
    API.nRunDesigns = new endpoint_1.Endpoint("smrt-link/runs", { $run_id: "id" });
    API.aRunDesign = new endpoint_1.Endpoint("smrt-link/runs/$run_id");
    API.nRunQCs = new endpoint_1.Endpoint("dummy endpoint");
    return API;
}());
exports.API = API;

//# sourceMappingURL=data:application/json;base64,