"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var moment = require("moment");
var model_1 = require("athenaeum/common/model");
var DesignModel = (function (_super) {
    __extends(DesignModel, _super);
    function DesignModel(object) {
        _super.call(this);
        this.uniqueId = String.EMPTY;
        this.name = String.EMPTY;
        this.summary = String.EMPTY;
        this.dateCreated = String.EMPTY;
        this.reserved = false;
        this.totalCells = 0;
        this.initialize(object);
        this.run = new RunModel(this.run);
    }
    DesignModel.prototype.update = function (object) {
        var _this = this;
        Object.keys(object).forEach(function (key) {
            if (key === "run") {
                _this.run.update(object[key]);
            }
            else {
                _this[key] = object[key];
            }
        });
        if (object.run) {
            if (!object.name) {
                this.name = this.run.runName;
            }
            if (!object.summary) {
                this.summary = "%d SMRT Cell%s, %s".sprintf(this.run.samples.length, this.run.samples.length !== 1 ? "s" : "", this.run.runDescription);
            }
        }
    };
    Object.defineProperty(DesignModel.prototype, "runSummary", {
        get: function () {
            var summaryPrefix = "%d SMRT Cell%s".sprintf(this.totalCells, ((this.totalCells !== 1) ? "s" : ""));
            return (!this.summary || !this.summary.startsWith(summaryPrefix))
                ? "%s, %s".sprintf(summaryPrefix, this.summary)
                : this.summary;
        },
        enumerable: true,
        configurable: true
    });
    return DesignModel;
}(model_1.Model));
exports.DesignModel = DesignModel;
var RunModel = (function (_super) {
    __extends(RunModel, _super);
    function RunModel(object) {
        _super.call(this);
        this.experimentId = String.EMPTY;
        this.experimentName = String.EMPTY;
        this.experimentDescription = String.EMPTY;
        this.runName = "Run " + moment().format("MM.DD.YYYY HH:mm");
        this.runDescription = String.EMPTY;
        this.uuid = String.EMPTY;
        this.samples = [
            new SampleModel()
        ];
        this.initialize(object);
        if (object) {
            if (object.samples) {
                this.samples = object.samples.map(function (sample) {
                    return new SampleModel(sample);
                });
            }
        }
    }
    RunModel.prototype.update = function (object) {
        var _this = this;
        Object.keys(object).forEach(function (key) {
            if (key !== "samples") {
                _this[key] = object[key];
            }
            else {
                object.samples.forEach(function (sample, index) {
                    _this.samples[index].update(sample);
                });
            }
        });
    };
    return RunModel;
}(model_1.Model));
exports.RunModel = RunModel;
var AutomationParameterModel = (function (_super) {
    __extends(AutomationParameterModel, _super);
    function AutomationParameterModel(object) {
        _super.call(this);
        this.name = String.EMPTY;
        this.type = String.EMPTY;
        this.value = String.EMPTY;
        this.initialize(object);
    }
    return AutomationParameterModel;
}(model_1.Model));
exports.AutomationParameterModel = AutomationParameterModel;
var SampleModel = (function (_super) {
    __extends(SampleModel, _super);
    function SampleModel(object) {
        var _this = this;
        _super.call(this);
        this.sampleName = "Well Sample";
        this.wellName = "A01";
        this.sampleDescription = String.EMPTY;
        this.insertSize = 10000;
        this.stageStartEnabled = false;
        this.sizeSelectionEnabled = false;
        this.magBead = true;
        this.automationParameters = null;
        this.primaryAutomationName = String.EMPTY;
        this.primaryConfigFileName = String.EMPTY;
        this.copyFiles = ["Fasta", "Bam"];
        this.readout = "Bases_Without_QVs";
        this.metricsVerbosity = "Minimal";
        this.templatePrepKit = String.EMPTY;
        this.bindingKit = String.EMPTY;
        this.sequencingKit = String.EMPTY;
        this.controlKit = String.EMPTY;
        this.subreadSetUuid = String.EMPTY;
        this.collectionMetadataUuid = String.EMPTY;
        this.initialize(object);
        var movieTime = 120;
        var immobilizationTime = "default";
        if (object) {
            if (object.copyFiles) {
                this.copyFiles = object.copyFiles.slice(0);
            }
            if (object.automationParameters) {
                this.automationParameters = object.automationParameters.map(function (parameter) {
                    var model = new AutomationParameterModel(parameter);
                    if (model.name === "MovieLength") {
                        _this.movieLengthModel = model;
                    }
                    else if (model.name === "ImmobilizationTime") {
                        _this.immobilizationTimeModel = model;
                    }
                    return model;
                });
            }
            if (object.movieTime) {
                movieTime = object.movieTime;
            }
            if (object.immobilizationTime) {
                immobilizationTime = object.immobilizationTime;
            }
        }
        if (!this.automationParameters) {
            this.automationParameters = [];
        }
        if (!this.movieLengthModel) {
            this.movieTime = movieTime;
        }
        if (immobilizationTime !== "default") {
            this.immobilizationTime = immobilizationTime;
        }
    }
    Object.defineProperty(SampleModel.prototype, "movieTime", {
        get: function () {
            if (!this.movieLengthModel) {
                return -1;
            }
            return parseInt(this.movieLengthModel.value, 10);
        },
        set: function (value) {
            if (!this.automationParameters) {
                return;
            }
            if (!this.movieLengthModel) {
                this.automationParameters.push(this.movieLengthModel = new AutomationParameterModel({
                    name: "MovieLength",
                    type: "Double",
                    value: value.toString()
                }));
            }
            else {
                this.movieLengthModel.value = value.toString();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SampleModel.prototype, "immobilizationTime", {
        get: function () {
            if (!this.immobilizationTimeModel) {
                return "default";
            }
            return parseInt(this.immobilizationTimeModel.value, 10);
        },
        set: function (value) {
            if (!this.automationParameters) {
                return;
            }
            if (value === "default") {
                if (this.immobilizationTimeModel) {
                    var index = this.automationParameters.indexOf(this.immobilizationTimeModel);
                    this.automationParameters.splice(index, 1);
                    this.immobilizationTimeModel = null;
                }
            }
            else {
                if (!this.immobilizationTimeModel) {
                    this.automationParameters.push(this.immobilizationTimeModel = new AutomationParameterModel({
                        name: "ImmobilizationTime",
                        type: "Double",
                        value: value.toString()
                    }));
                }
                else {
                    this.immobilizationTimeModel.value = value.toString();
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    SampleModel.prototype.update = function (object) {
        var _this = this;
        var movieTime;
        var immobilizationTime;
        Object.keys(object).forEach(function (key) {
            if (key === "automationParameters") {
                _this.movieLengthModel = null;
                _this.immobilizationTimeModel = null;
                _this.automationParameters = object.automationParameters.map(function (parameter) {
                    var model = new AutomationParameterModel(parameter);
                    if (model.name === "MovieLength") {
                        _this.movieLengthModel = model;
                    }
                    else if (model.name === "ImmobilizationTime") {
                        _this.immobilizationTimeModel = model;
                    }
                    return model;
                });
            }
            else if (key === "movieTime") {
                movieTime = object[key];
            }
            else if (key === "immobilizationTime") {
                immobilizationTime = object[key];
            }
            else if (key === "copyFiles") {
                _this.copyFiles = object.copyFiles.slice();
            }
            else {
                _this[key] = object[key];
            }
        });
        if (typeof movieTime !== "undefined") {
            this.movieTime = movieTime;
        }
        if (typeof immobilizationTime !== "undefined") {
            this.immobilizationTime = immobilizationTime;
        }
    };
    return SampleModel;
}(model_1.Model));
exports.SampleModel = SampleModel;

//# sourceMappingURL=data:application/json;base64,