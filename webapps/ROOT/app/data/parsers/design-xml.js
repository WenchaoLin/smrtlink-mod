"use strict";
var parts_service_1 = require("../services/parts-service");
var xml_1 = require("athenaeum/common/xml");
var designNSMap = {
    default: "http://pacificbiosciences.com/PacBioBaseDataModel.xsd",
    xsi: "http://www.w3.org/2001/XMLSchema-instance",
    pbds: "http://pacificbiosciences.com/PacBioDatasets.xsd",
    pbdm: "http://pacificbiosciences.com/PacBioDataModel.xsd",
    pbrk: "http://pacificbiosciences.com/PacBioReagentKit.xsd",
    pbsample: "http://pacificbiosciences.com/PacBioSampleInfo.xsd",
    pbpn: "http://pacificbiosciences.com/PacBioPartNumbers.xsd",
    pbmeta: "http://pacificbiosciences.com/PacBioCollectionMetadata.xsd"
};
function parse(xml) {
    var doc = xml_1.XMLDocument.fromString(xml, designNSMap);
    var run = {};
    var pbdm = doc.getElement("/pbdm:PacBioDataModel");
    if (!pbdm) {
        throw new Error("Missing PacBioDataModel element");
    }
    var experimentContainer = pbdm.getElement("pbdm:ExperimentContainer");
    if (!experimentContainer) {
        throw new Error("Missing ExperimentContainer element");
    }
    var runElement = experimentContainer.getElement(".//pbdm:Run");
    if (!runElement) {
        throw new Error("Missing Run element");
    }
    run.experimentName = experimentContainer.getAttribute("Name");
    run.experimentDescription = experimentContainer.getAttribute("Description");
    run.experimentId = experimentContainer.getAttribute("ExperimentId");
    run.runName = runElement.getAttribute("Name");
    run.runDescription = runElement.getAttribute("Description");
    run.uuid = runElement.getAttribute("UniqueId");
    run.samples = runElement.getElements(".//pbds:SubreadSet").map(function (sampleElement) {
        var sample = {};
        sample.subreadSetUuid = sampleElement.getAttribute("UniqueId");
        var metadataElement = sampleElement.getElement("pbds:DataSetMetadata/pbmeta:Collections/pbmeta:CollectionMetadata");
        sample.collectionMetadataUuid = metadataElement.getAttribute("UniqueId");
        var wellElement = metadataElement.getElement("pbmeta:WellSample");
        sample.sampleName = wellElement.getAttribute("Name");
        sample.sampleDescription = wellElement.getAttribute("Description");
        sample.wellName = wellElement.getString("pbmeta:WellName");
        sample.insertSize = wellElement.getNumber("pbmeta:InsertSize");
        sample.stageStartEnabled = wellElement.getString("pbmeta:StageHotstartEnabled").toLowerCase() === "true";
        sample.sizeSelectionEnabled = wellElement.getString("pbmeta:SizeSelectionEnabled").toLowerCase() === "true";
        // TODO: (bforbes)(2016-03-22): This code set `sample.controlKit`
        // to the name of the control kit. RunService looks the barcode
        // up based on the name. Once the XML for the control kit comes back
        // with a bar code, this can be changed to just grab that.
        var controlKitName = wellElement.getString("pbmeta:DNAControlComplex");
        if (controlKitName) {
            sample.controlKit = controlKitName;
        }
        var automationElement = metadataElement.getElement("pbmeta:Automation");
        sample.magBead = automationElement.getAttribute("Name") === "Workflow_Magbead.py";
        sample.automationParameters = automationElement.getElements(".//default:AutomationParameter").map(function (paramElement) {
            var param = {
                name: paramElement.getAttribute("Name"),
                type: paramElement.getAttribute("ValueDataType"),
                value: paramElement.getAttribute("SimpleValue")
            };
            param.xml = paramElement;
            return param;
        });
        var prepKitElement = metadataElement.getElement("pbmeta:TemplatePrepKit");
        if (prepKitElement) {
            sample.templatePrepKit = prepKitElement.getAttribute("Barcode");
        }
        var bindingKitElement = metadataElement.getElement("pbmeta:BindingKit");
        if (bindingKitElement) {
            sample.bindingKit = bindingKitElement.getAttribute("Barcode");
        }
        var sequencingElement = metadataElement.getElement("pbmeta:SequencingKitPlate");
        if (sequencingElement) {
            sample.sequencingKit = sequencingElement.getAttribute("Barcode");
        }
        var primaryElement = metadataElement.getElement("pbmeta:Primary");
        if (primaryElement) {
            sample.primaryAutomationName = primaryElement.getString("pbmeta:AutomationName");
            sample.primaryConfigFileName = primaryElement.getString("pbmeta:ConfigFileName");
            var optionsElement = primaryElement.getElement("pbmeta:OutputOptions");
            if (optionsElement) {
                sample.copyFiles = optionsElement.getElements("pbmeta:CopyFiles/*").map(function (element) { return element.getString("."); });
                sample.metricsVerbosity = optionsElement.getString("pbmeta:MetricsVerbosity");
                sample.readout = optionsElement.getString("pbmeta:Readout");
            }
        }
        sample.xml = sampleElement;
        return sample;
    });
    run.xml = doc;
    return run;
}
exports.parse = parse;
/* tslint:disable:max-line-length */
var runXML = "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<pbdm:PacBioDataModel xmlns=\"http://pacificbiosciences.com/PacBioBaseDataModel.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:pbds=\"http://pacificbiosciences.com/PacBioDatasets.xsd\" xmlns:pbdm=\"http://pacificbiosciences.com/PacBioDataModel.xsd\" xmlns:pbrk=\"http://pacificbiosciences.com/PacBioReagentKit.xsd\" xmlns:pbsample=\"http://pacificbiosciences.com/PacBioSampleInfo.xsd\" xmlns:pbpn=\"http://pacificbiosciences.com/PacBioPartNumbers.xsd\" xmlns:pbmeta=\"http://pacificbiosciences.com/PacBioCollectionMetadata.xsd\" xsi:schemaLocation=\"http://pacificbiosciences.com/PacBioDataModel.xsd PacBioDataModel.xsd\">\n    <pbdm:ExperimentContainer Name=\"\" ExperimentId=\"\" Description=\"\" CreatedAt=\"0001-01-01T00:00:00\" ModifiedAt=\"0001-01-01T00:00:00\">\n        <pbdm:InvestigatorName>Default</pbdm:InvestigatorName>\n        <pbdm:CreatedDate>0001-01-01</pbdm:CreatedDate>\n        <pbdm:Runs>\n            <pbdm:Run Name=\"\" Description=\"\" Tags=\"\" MetaType=\"Run\" TimeStampedName=\"DefaultTimeStampedRunName\" CreatedAt=\"0001-01-01T00:00:00\" ModifiedAt=\"0001-01-01T00:00:00\" UniqueId=\"\" Status=\"Ready\">\n                <pbdm:Outputs>\n                    <pbdm:SubreadSets>\n                    </pbdm:SubreadSets>\n                </pbdm:Outputs>\n            </pbdm:Run>\n        </pbdm:Runs>\n    </pbdm:ExperimentContainer>\n</pbdm:PacBioDataModel>";
var sampleXML = "                        <pbds:SubreadSet Name=\"\" UniqueId=\"\" MetaType=\"SubreadSetCollection\" TimeStampedName=\"\">\n                            <ExternalResources>\n                                <ExternalResource MetaType=\"ExternalResource\" TimeStampedName=\"\"/>\n                            </ExternalResources>\n                            <pbds:DataSetMetadata>\n                                <pbds:TotalLength>0</pbds:TotalLength>\n                                <pbds:NumRecords>0</pbds:NumRecords>\n                                <pbmeta:Collections>\n                                    <pbmeta:CollectionMetadata UniqueId=\"\" MetaType=\"CollectionMetadata\" TimeStampedName=\"\" CreatedAt=\"0001-01-01T00:00:00\" ModifiedAt=\"0001-01-01T00:00:00\" Status=\"Ready\" InstrumentId=\"\" InstrumentName=\"\">\n                                        <pbmeta:InstCtrlVer>String</pbmeta:InstCtrlVer>\n                                        <pbmeta:SigProcVer>String</pbmeta:SigProcVer>\n                                        <pbmeta:RunDetails>\n                                            <pbmeta:TimeStampedName>DefaultTimeStampedRunName</pbmeta:TimeStampedName>\n                                            <pbmeta:Name></pbmeta:Name>\n                                            <pbmeta:CreatedBy>String</pbmeta:CreatedBy>\n                                            <pbmeta:WhenCreated>0001-01-01T00:00:00</pbmeta:WhenCreated>\n                                            <pbmeta:WhenStarted>0001-01-01T00:00:00</pbmeta:WhenStarted>\n                                        </pbmeta:RunDetails>\n                                        <pbmeta:WellSample Name=\"\" Description=\"\" CreatedAt=\"0001-01-01T00:00:00\" ModifiedAt=\"0001-01-01T00:00:00\">\n                                            <pbmeta:WellName></pbmeta:WellName>\n                                            <pbmeta:Concentration>0</pbmeta:Concentration>\n                                            <pbmeta:InsertSize></pbmeta:InsertSize>\n                                            <pbmeta:SampleReuseEnabled>false</pbmeta:SampleReuseEnabled>\n                                            <pbmeta:StageHotstartEnabled></pbmeta:StageHotstartEnabled>\n                                            <pbmeta:SizeSelectionEnabled></pbmeta:SizeSelectionEnabled>\n                                            <pbmeta:UseCount>0</pbmeta:UseCount>\n                                            <pbmeta:DNAControlComplex></pbmeta:DNAControlComplex>\n                                        </pbmeta:WellSample>\n                                        <pbmeta:Automation Name=\"\">\n                                            <AutomationParameters>\n                                            </AutomationParameters>\n                                        </pbmeta:Automation>\n                                        <pbmeta:CollectionNumber></pbmeta:CollectionNumber>\n                                        <pbmeta:CellIndex>0</pbmeta:CellIndex>\n                                        <pbmeta:SetNumber>0</pbmeta:SetNumber>\n                                        <pbmeta:TemplatePrepKit Name=\"\" PartNumber=\"\" LotNumber=\"\" Barcode=\"\" ExpirationDate=\"\" MinInsertSize=\"\" MaxInsertSize=\"\">\n                                            <LeftAdaptorSequence xmlns=\"http://pacificbiosciences.com/PacBioBaseDataModel.xsd\"></LeftAdaptorSequence>\n                                            <RightAdaptorSequence xmlns=\"http://pacificbiosciences.com/PacBioBaseDataModel.xsd\"></RightAdaptorSequence>\n                                        </pbmeta:TemplatePrepKit>\n                                        <pbmeta:BindingKit Name=\"\" PartNumber=\"\" LotNumber=\"\" Barcode=\"\" ExpirationDate=\"\" />\n                                        <pbmeta:SequencingKitPlate Name=\"\" PartNumber=\"\" LotNumber=\"\" Barcode=\"\" ExpirationDate=\"\" />\n                                        <pbmeta:Primary>\n                                            <pbmeta:AutomationName></pbmeta:AutomationName>\n                                            <pbmeta:ConfigFileName></pbmeta:ConfigFileName>\n                                            <pbmeta:SequencingCondition>DefaultPrimarySequencingCondition</pbmeta:SequencingCondition>\n                                            <pbmeta:OutputOptions>\n                                                <pbmeta:ResultsFolder></pbmeta:ResultsFolder>\n                                                <pbmeta:CollectionPathUri></pbmeta:CollectionPathUri>\n                                                <pbmeta:CopyFiles>\n                                                </pbmeta:CopyFiles>\n                                                <pbmeta:Readout></pbmeta:Readout>\n                                                <pbmeta:MetricsVerbosity></pbmeta:MetricsVerbosity>\n                                            </pbmeta:OutputOptions>\n                                        </pbmeta:Primary>\n                                        <pbmeta:Secondary>\n                                            <pbmeta:AutomationName>DefaultSecondaryAutomationName</pbmeta:AutomationName>\n                                            <pbmeta:AutomationParameters>\n                                                <pbmeta:AutomationParameter Name=\"Reference\" CreatedAt=\"0001-01-01T00:00:00\" ModifiedAt=\"0001-01-01T00:00:00\" ValueDataType=\"String\" SimpleValue=\"DefaultSecondaryAnalysisReferenceName\" />\n                                            </pbmeta:AutomationParameters>\n                                            <pbmeta:CellCountInJob>0</pbmeta:CellCountInJob>\n                                        </pbmeta:Secondary>\n                                        <pbmeta:UserDefinedFields>\n                                            <DataEntities Name=\" LIMS_IMPORT \" SimpleValue=\"DefaultUserDefinedFieldLIMS\" ValueDataType=\"String\" />\n                                        </pbmeta:UserDefinedFields>\n                                    </pbmeta:CollectionMetadata>\n                                </pbmeta:Collections>\n                            </pbds:DataSetMetadata>\n                        </pbds:SubreadSet>";
var automationXML = "<AutomationParameter Name=\"\" CreatedAt=\"0001-01-01T00:00:00\" ModifiedAt=\"0001-01-01T00:00:00\" ValueDataType=\"\" SimpleValue=\"\" />";
var templateKitXML = "<pbmeta:TemplatePrepKit Name=\"\" PartNumber=\"\" LotNumber=\"\" Barcode=\"\" ExpirationDate=\"\" MinInsertSize=\"\" MaxInsertSize=\"\">\n                                                <LeftAdaptorSequence xmlns=\"http://pacificbiosciences.com/PacBioBaseDataModel.xsd\"></LeftAdaptorSequence>\n                                                <RightAdaptorSequence xmlns=\"http://pacificbiosciences.com/PacBioBaseDataModel.xsd\"></RightAdaptorSequence>\n                                            </pbmeta:TemplatePrepKit>";
var kitXML = "<pbmeta:%s Name=\"\" PartNumber=\"\" LotNumber=\"\" Barcode=\"\" ExpirationDate=\"\" />";
/* tslint:enable:max-line-length */
var updateKitMap = {
    templatePrep: "TemplatePrepKit",
    binding: "BindingKit",
    sequencing: "SequencingKitPlate"
};
function update(model, partsService) {
    var doc = (function () {
        var doc = model.xml;
        if (!doc) {
            doc = xml_1.XMLDocument.fromString(runXML, designNSMap);
        }
        return doc;
    })();
    var pbdm = doc.getElement("/pbdm:PacBioDataModel");
    if (!pbdm) {
        throw new Error("Missing PacBioDataModel element");
    }
    var experimentContainer = pbdm.getElement("pbdm:ExperimentContainer");
    if (!experimentContainer) {
        throw new Error("Missing ExperimentContainer element");
    }
    var runElement = experimentContainer.getElement(".//pbdm:Run");
    if (!runElement) {
        throw new Error("Missing Run element");
    }
    var createdAt = new Date().toISOString();
    experimentContainer.setAttribute("Name", model.experimentName);
    experimentContainer.setAttribute("Description", model.experimentDescription);
    experimentContainer.setAttribute("ExperimentId", model.experimentId);
    experimentContainer.setAttribute("CreatedAt", createdAt);
    runElement.setAttribute("Name", model.runName);
    runElement.setAttribute("Description", model.runDescription);
    runElement.setAttribute("UniqueId", model.uuid);
    runElement.setAttribute("CreatedBy", "unknown");
    runElement.setAttribute("CreatedAt", createdAt);
    var setsElement = runElement.getElement("pbdm:Outputs/pbdm:SubreadSets");
    var sampleModelElements = model.samples.map(function (sample, index) {
        var modelElement = sample.xml;
        if (!modelElement) {
            modelElement = doc.createElementTree(sampleXML);
            setsElement.appendChild(modelElement);
        }
        modelElement.setAttribute("Name", "SubreadSet_" + sample.sampleName);
        modelElement.setAttribute("UniqueId", sample.subreadSetUuid);
        modelElement.setAttribute("CreatedAt", createdAt);
        var metadataElement = modelElement.getElement("pbds:DataSetMetadata/pbmeta:Collections/pbmeta:CollectionMetadata");
        metadataElement.setAttribute("UniqueId", sample.collectionMetadataUuid);
        metadataElement.setAttribute("CreatedAt", createdAt);
        var wellElement = metadataElement.getElement("pbmeta:WellSample");
        wellElement.setAttribute("Name", sample.sampleName);
        wellElement.setAttribute("Description", sample.sampleDescription);
        wellElement.setAttribute("CreatedAt", createdAt);
        wellElement.setString("pbmeta:WellName", sample.wellName);
        wellElement.setNumber("pbmeta:InsertSize", sample.insertSize);
        wellElement.setString("pbmeta:StageHotstartEnabled", Boolean(sample.stageStartEnabled).toString());
        wellElement.setString("pbmeta:SizeSelectionEnabled", Boolean(sample.sizeSelectionEnabled).toString());
        var runDetailsElement = metadataElement.getElement("pbmeta:RunDetails");
        if (!runDetailsElement) {
            runDetailsElement = doc.createElement("pbmeta:RunDetails");
            metadataElement.appendChild(runDetailsElement);
        }
        var runNameElement = runDetailsElement.getElement("pbmeta:Name");
        if (!runNameElement) {
            runNameElement = doc.createElement("pbmeta:Name");
            runDetailsElement.appendChild(runNameElement);
        }
        runNameElement.setString(".", model.runName);
        var createdByElement = runDetailsElement.getElement("pbmeta:CreatedBy");
        if (!createdByElement) {
            createdByElement = doc.createElement("pbmeta:CreatedBy");
            runDetailsElement.appendChild(createdByElement);
        }
        createdByElement.setString(".", "");
        var whenCreatedElement = runDetailsElement.getElement("pbmeta:WhenCreated");
        if (!whenCreatedElement) {
            whenCreatedElement = doc.createElement("pbmeta:WhenCreated");
            runDetailsElement.appendChild(whenCreatedElement);
        }
        whenCreatedElement.setString(".", createdAt);
        if (sample.controlKit) {
            var controlKit = partsService.controlKitFromBarcode(sample.controlKit);
            wellElement.setString("pbmeta:DNAControlComplex", controlKit ? controlKit.name : String.EMPTY);
        }
        var automationElement = metadataElement.getElement("pbmeta:Automation");
        automationElement.setAttribute("Name", "Workflow_" + (sample.magBead ? "Magbead" : "Diffusion") + ".py");
        var parameterContainer = automationElement.getElement("default:AutomationParameters");
        parameterContainer.empty();
        sample.automationParameters.map(function (param) {
            var element = doc.createElementTree(automationXML);
            parameterContainer.appendChild(element);
            element.setAttribute("Name", param.name);
            element.setAttribute("ValueDataType", param.type);
            element.setAttribute("SimpleValue", param.value);
            element.setAttribute("CreatedAt", createdAt);
        });
        metadataElement.setNumber("pbmeta:CollectionNumber", index);
        Object.keys(updateKitMap).forEach(function (kitType) {
            var barcode = sample[(kitType + "Kit")];
            var barcodeInfo = partsService.parseBarcode(barcode);
            var part = partsService.getPart(barcodeInfo.partNumber);
            if (!part) {
                return;
            }
            var elementName = updateKitMap[kitType];
            var element = metadataElement.getElement("pbmeta:" + elementName);
            if (!element) {
                element = doc.createElementTree(part.type === parts_service_1.PartType.TemplatePrepKit ?
                    templateKitXML :
                    kitXML.sprintf(elementName));
                metadataElement.appendChild(element);
            }
            element.setAttribute("Name", part.name);
            element.setAttribute("PartNumber", barcodeInfo.partNumber);
            element.setAttribute("LotNumber", barcodeInfo.lotNumber);
            element.setAttribute("Barcode", barcode);
            // TODO: is this right?
            element.setAttribute("ExpirationDate", barcodeInfo.expDate);
            if (parts_service_1.isTemplatePrepKit(part)) {
                element.setAttribute("MinInsertSize", part.minInsertSize);
                element.setAttribute("MaxInsertSize", part.maxInsertSize);
                element.setString("default:LeftAdaptorSequence", part.leftAdaptorSequence);
                element.setString("default:RightAdaptorSequence", part.rightAdaptorSequence);
            }
        });
        var primaryElement = metadataElement.getElement("pbmeta:Primary");
        primaryElement.setString("pbmeta:AutomationName", sample.primaryAutomationName);
        primaryElement.setString("pbmeta:ConfigFileName", sample.primaryConfigFileName);
        var optionsElement = primaryElement.getElement("pbmeta:OutputOptions");
        optionsElement.setString("pbmeta:MetricsVerbosity", sample.metricsVerbosity);
        optionsElement.setString("pbmeta:Readout", sample.readout);
        var copyFilesElement = optionsElement.getElement("pbmeta:CopyFiles");
        copyFilesElement.empty();
        sample.copyFiles.forEach(function (file) {
            var node = doc.createElement("pbmeta:CollectionFileCopy");
            node.setString(".", file);
            copyFilesElement.appendChild(node);
        });
        return modelElement;
    });
    // Remove any samples from the original XML that have been removed
    // from the model
    setsElement.getElements(".//pbds:SubreadSet").forEach(function (element) {
        if (sampleModelElements.indexOf(element) === -1) {
            element.orphan();
        }
    });
    return doc;
}
exports.update = update;

//# sourceMappingURL=data:application/json;base64,