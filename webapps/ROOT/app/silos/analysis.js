"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("angular2/core");
var router_1 = require("angular2/router");
var analysis_settings_1 = require("./analysis/analysis-settings");
var explorer_1 = require("./analysis/explorer");
var details_1 = require("./analysis/details");
var results_1 = require("./analysis/results");
var select_datasets_1 = require("./analysis/select-datasets");
var navbar_settings_1 = require("../navbar-settings");
var silo_1 = require("./silo");
var alignment_1 = require("../data/facets/alignment");
var barcode_1 = require("../data/facets/barcode");
var ccs_read_1 = require("../data/facets/ccs-read");
var hdf_subread_1 = require("../data/facets/hdf-subread");
var reference_1 = require("../data/facets/reference");
var subread_1 = require("../data/facets/subread");
var job_1 = require("../data/facets/job");
var dataset_type_1 = require("../data/dataset-type");
exports.PAGE = {
    DATA_ANALYSIS: "Jobs",
    RESULTS: "Job",
    ALIGNED: "AlignedReads",
    ALIGNED_DETAIL: "AlignedRead",
    BARCODES: "Barcodes",
    BARCODE_DETAIL: "Barcode",
    CCS_DATA: "CCSReads",
    CCS_DETAIL: "CCSRead",
    RS_RAW_DATA: "RSRawData",
    RS_RAW_DETAIL: "RSRawDetail",
    REFERENCES: "References",
    REFERENCE_DETAIL: "Reference",
    BAM_RAW_DATA: "BAMRawData",
    BAM_RAW_DETAIL: "BAMRawDetail",
    SELECT_DATA: "SelectData",
    SETTINGS: "Settings",
    SETTING: "Setting"
};
exports.PAGE_FOR_FILETYPE = (_a = {},
    _a[dataset_type_1.DatasetType.ALIGNMENT.filetype] = exports.PAGE.ALIGNED_DETAIL,
    _a[dataset_type_1.DatasetType.BARCODE.filetype] = exports.PAGE.BARCODE_DETAIL,
    _a[dataset_type_1.DatasetType.CONSENSUS_READ.filetype] = exports.PAGE.CCS_DETAIL,
    _a[dataset_type_1.DatasetType.HDF_SUBREAD.filetype] = exports.PAGE.RS_RAW_DETAIL,
    _a[dataset_type_1.DatasetType.REFERENCE.filetype] = exports.PAGE.REFERENCE_DETAIL,
    _a[dataset_type_1.DatasetType.SUBREAD.filetype] = exports.PAGE.BAM_RAW_DETAIL,
    _a
);
function route(path, name, component, data, useAsDefault) {
    if (useAsDefault === void 0) { useAsDefault = false; }
    return {
        path: path,
        name: name,
        component: component,
        data: data,
        useAsDefault: useAsDefault
    };
}
var Analysis = (function () {
    function Analysis() {
        navbar_settings_1.navbarSettings.setSilo(silo_1.SILO.DATA_ANALYSIS);
    }
    Analysis = __decorate([
        core_1.Component({
            template: "\n        <router-outlet></router-outlet>\n    ",
            directives: [router_1.RouterOutlet],
            encapsulation: core_1.ViewEncapsulation.None
        }),
        router_1.RouteConfig([
            route("/jobs", exports.PAGE.DATA_ANALYSIS, explorer_1.Explorer, {
                title: "Analyses",
                pageId: "analysis-jobs",
                detailsPage: exports.PAGE.RESULTS,
                explorerControls: {
                    createNewAnalysis: true,
                    createNewDataSet: false,
                    datasetButtons: true,
                    importExportArchiveRestore: false,
                    viewDetailsCopyDelete: true,
                    startStop: true
                },
                facet: job_1.JOB_FACET
            }, true),
            route("/job/:id", exports.PAGE.RESULTS, results_1.Results),
            route("/alignedreads", exports.PAGE.ALIGNED, explorer_1.Explorer, {
                title: "Aligned Reads",
                pageId: "alignedreads",
                detailsPage: exports.PAGE.ALIGNED_DETAIL,
                explorerControls: {
                    createNewAnalysis: false,
                    createNewDataSet: true,
                    datasetButtons: true,
                    importExportArchiveRestore: true,
                    viewDetailsCopyDelete: true,
                    startStop: false
                },
                facet: alignment_1.ALIGNMENT_FACET
            }),
            route("/alignedread/:id", exports.PAGE.ALIGNED_DETAIL, details_1.Details, {
                previousPage: exports.PAGE.ALIGNED,
                facet: alignment_1.ALIGNMENT_FACET
            }),
            route("/barcodes", exports.PAGE.BARCODES, explorer_1.Explorer, {
                title: "Barcode Data",
                pageId: "barcodes",
                detailsPage: exports.PAGE.BARCODE_DETAIL,
                explorerControls: {
                    createNewAnalysis: false,
                    createNewDataSet: false,
                    datasetButtons: true,
                    importExportArchiveRestore: true,
                    viewDetailsCopyDelete: true,
                    startStop: false
                },
                facet: barcode_1.BARCODE_FACET
            }),
            route("/barcode/:id", exports.PAGE.BARCODE_DETAIL, details_1.Details, {
                previousPage: exports.PAGE.BARCODES,
                facet: barcode_1.BARCODE_FACET
            }),
            route("/ccsreads", exports.PAGE.CCS_DATA, explorer_1.Explorer, {
                title: "CCS Data",
                pageId: "ccsreads",
                detailsPage: exports.PAGE.CCS_DETAIL,
                explorerControls: {
                    createNewAnalysis: false,
                    createNewDataSet: true,
                    datasetButtons: true,
                    importExportArchiveRestore: true,
                    viewDetailsCopyDelete: true,
                    startStop: false
                },
                facet: ccs_read_1.CCS_READ_FACET
            }),
            route("/ccsread/:id", exports.PAGE.CCS_DETAIL, details_1.Details, {
                previousPage: exports.PAGE.CCS_DATA,
                facet: ccs_read_1.CCS_READ_FACET
            }),
            route("/hdfsubreads", exports.PAGE.RS_RAW_DATA, explorer_1.Explorer, {
                title: "Raw Data, RS II",
                pageId: "hdfsubreads",
                detailsPage: exports.PAGE.RS_RAW_DETAIL,
                explorerControls: {
                    createNewAnalysis: false,
                    createNewDataSet: true,
                    datasetButtons: true,
                    importExportArchiveRestore: true,
                    viewDetailsCopyDelete: true,
                    startStop: false
                },
                facet: hdf_subread_1.HDF_SUBREAD_FACET
            }),
            route("/hdfsubread/:id", exports.PAGE.RS_RAW_DETAIL, details_1.Details, {
                previousPage: exports.PAGE.RS_RAW_DATA,
                facet: hdf_subread_1.HDF_SUBREAD_FACET,
                canAnalyze: true,
                datasetShortname: dataset_type_1.DatasetType.HDF_SUBREAD.shortName
            }),
            route("/references", exports.PAGE.REFERENCES, explorer_1.Explorer, {
                title: "Reference Data",
                pageId: "references",
                detailsPage: exports.PAGE.REFERENCE_DETAIL,
                explorerControls: {
                    createNewAnalysis: false,
                    createNewDataSet: false,
                    datasetButtons: true,
                    importExportArchiveRestore: true,
                    viewDetailsCopyDelete: true,
                    startStop: false
                },
                facet: reference_1.REFERENCE_FACET
            }),
            route("/reference/:id", exports.PAGE.REFERENCE_DETAIL, details_1.Details, {
                previousPage: exports.PAGE.REFERENCES,
                facet: reference_1.REFERENCE_FACET
            }),
            route("/subreads", exports.PAGE.BAM_RAW_DATA, explorer_1.Explorer, {
                title: "Raw Data, BAM",
                pageId: "subreads",
                detailsPage: exports.PAGE.BAM_RAW_DETAIL,
                explorerControls: {
                    createNewAnalysis: false,
                    createNewDataSet: true,
                    datasetButtons: true,
                    importExportArchiveRestore: true,
                    viewDetailsCopyDelete: true,
                    startStop: false
                },
                facet: subread_1.SUBREAD_FACET
            }),
            route("/subread/:id", exports.PAGE.BAM_RAW_DETAIL, details_1.Details, {
                previousPage: exports.PAGE.BAM_RAW_DATA,
                facet: subread_1.SUBREAD_FACET,
                canAnalyze: true,
                datasetShortname: dataset_type_1.DatasetType.SUBREAD.shortName
            }),
            route("/select-data", exports.PAGE.SELECT_DATA, select_datasets_1.SelectDatasets),
            route("/settings", exports.PAGE.SETTINGS, analysis_settings_1.AnalysisSettings),
            route("/settings/:shortName/:id", exports.PAGE.SETTING, analysis_settings_1.AnalysisSettings)
        ]), 
        __metadata('design:paramtypes', [])
    ], Analysis);
    return Analysis;
}());
exports.Analysis = Analysis;
var _a;

//# sourceMappingURL=data:application/json;base64,