/**
 * @copyright Copyright (c) 2016, Pacific Biosciences of California, Inc.
 * @author <a href="mailto:bskinner@pacificbiosciences.com">Brian Skinner</a>
 * @author <a href="mailto:dbarreto@pacificbiosciences.com">David Barreto</a>
 */
"use strict";
var router_1 = require("angular2/router");
var core_1 = require("angular2/core");
var injector_1 = require("athenaeum/common/injector");
var http_1 = require("athenaeum/services/http");
var error_service_1 = require("../silos/error/error-service");
var auth_service_1 = require("athenaeum/data/services/auth-service");
// **** API VALIDATION & USER AUTH -> WRAPPED PROMISE.ALL ****
function canConnect(nextInstr, currInstr) {
    var injector = injector_1.get();
    var http = injector.get(http_1.Http);
    var router = injector.get(router_1.Router);
    var authService = injector.get(auth_service_1.AuthenticationService);
    return isAuthEnabled(http).then(function (enabled) {
        return Promise.all([
            isApiActive(http, router),
            isUserAuthenticated(enabled, authService, router)
        ]);
    }).then(function () {
        return true;
    }).catch(function () {
        return false;
    });
}
exports.canConnect = canConnect;
// TODO: (bforbes)(2016-05-04) This should really be in the authentication layer
var authEnabled;
function isAuthEnabled(http) {
    if (authEnabled) {
        return authEnabled;
    }
    authEnabled = http.get("api://smrt-link/config/enable-auth")
        .map(function (result) {
        return result.entries[0].value !== "false";
    })
        .do(function (result) {
        if (result && !localStorage.getItem("user")) {
            // This should only happen if the server is switched from requiring auth to not requiring auth
            localStorage.removeItem("token");
        }
        if (!result) {
            // The UI should function as if the user is logged in. Setting
            // "token" to a truthy value accomplishes that
            // TODO: (bforbes)(2016-05-04) This needs to be re-thought after
            // the 3.1.0 release
            localStorage.setItem("token", "no-ldap");
            // Clear user info from local storage
            localStorage.removeItem("user");
        }
    })
        .toPromise();
    return authEnabled;
}
function isApiActive(http, router) {
    var promise = new Promise(function (resolve, reject) {
        http.get("api://smrt-link/status")
            .toPromise()
            .then(function (response) { return resolve(); })
            .catch(function (rawError) {
            var injector = core_1.Injector.resolveAndCreate([error_service_1.ErrorService]);
            var errorService = injector.get(error_service_1.ErrorService);
            errorService.logError(rawError);
            router.navigate(["/Error"]);
            reject();
        });
    });
    return promise;
}
function isUserAuthenticated(enabled, authService, router) {
    if (authService.isLoggedIn()) {
        return Promise.resolve();
    }
    else {
        router.navigate(["/Login"]);
        return Promise.reject(null);
    }
}

//# sourceMappingURL=data:application/json;base64,